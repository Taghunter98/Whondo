/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/static/jay-comps/comp-pages/create.js":
/*!***************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/create.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Create: () => (/* binding */ Create)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Create extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n    \r\n    name_ = \"Verify Page\";\r\n\r\n    createHTML() {\r\n\r\n        return /* html */`\r\n        <comp-navbar></comp-navbar>\r\n        <div class=\"background\">\r\n            <div class=\"container\">\r\n                <comp-dialog id=\"describe\"></comp-dialog>\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const effect = this.effect.slideUp(20);\r\n        const prop   = this.effect.prop(\"slideUp\", .5);\r\n\r\n        const background = this.css({\r\n            class: \"background\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            justifyContent: \"centre\",\r\n            alignItems: \"centre\",\r\n            background: \"black10\",\r\n            overflow: \"hidden\",\r\n        });\r\n\r\n        const container = this.css({\r\n            class: \"container\",\r\n            background: \"white\",\r\n            animation: prop, \r\n            width: \"auto\",        \r\n        });\r\n\r\n        return /* css */ `\r\n       ${effect}\r\n       ${background}\r\n       ${container}\r\n        \r\n        `;\r\n    \r\n    }\r\n\r\n    hook() {\r\n\r\n        const dialogBox = this.shadowRoot.getElementById(\"describe\");\r\n\r\n        customElements.whenDefined('comp-dialog').then(() => {\r\n\r\n            requestAnimationFrame(() => {\r\n\r\n                dialogBox.showButton();\r\n\r\n                dialogBox.title     = \"Email Verification\";\r\n                dialogBox.paragraph = \"We have sent you an email with a verification link.<br>If you do not receive an email, please check your spam.\";\r\n                dialogBox.svgIcon   = ` xmlns=\"http://www.w3.org/2000/svg\" height=\"64px\" viewBox=\"0 -960 960 960\" width=\"64px\" fill=\"currentColor\"><path d=\"m734-164-42-42 73-74H584v-60h181l-73-74 42-42 146 146-146 146ZM140-280q-24.75 0-42.37-17.63Q80-315.25 80-340v-440q0-24.75 17.63-42.38Q115.25-840 140-840h560q24.75 0 42.38 17.62Q760-804.75 760-780v232q-7.5-1-15-1.5t-15-.5q-8 0-15 .5t-15 1.5v-185L416-532 140-732v392h351q-1 8-1 13.5v13.75q0 8.25.5 16.5T493-280H140Zm36-500 240 174 246-174H176Zm-36 440v-440 440Z\"/`;\r\n            \r\n            });\r\n        \r\n        });\r\n\r\n        console.log(dialogBox.title);\r\n\r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/create.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/login.js":
/*!**************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/login.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Login: () => (/* binding */ Login)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Login extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    name_ = \"Login Page\";\r\n       \r\n    createHTML() {\r\n    \r\n        return /* html */ `\r\n        \r\n        <div class=\"background\">\r\n\r\n            <div class=\"itemContainer\">\r\n\r\n                <div class=\"modal\">\r\n\r\n                    <div class=\"textContainer\">\r\n                        <h3 class=\"title\">Login</h3>\r\n                        <p class=\"text\">Welcome back! Let's find you a new home.</p>\r\n                    </div>\r\n\r\n                    <div class=\"inputs\">\r\n                        <comp-input id=\"email\" name=\"email\"></comp-input>\r\n                        <comp-input id=\"password\" \r\n                        name=\"password\"></comp-input>\r\n                    </div>\r\n\r\n                    <div class=\"footer\">\r\n                        <comp-button id=\"submit\">Refresh Card</comp-button>\r\n                        <p class=\"link\"><a>Forgot password?</a></p>\r\n                    </div>\r\n                    <p id=\"result\"></p>\r\n                </div>\r\n\r\n            <div class=\"backgroundImage\">\r\n                <img class=\"image\" src=\"https://images.pexels.com/photos/4781426/pexels-photo-4781426.jpeg\">\r\n            </div>\r\n            </div>\r\n            \r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {   \r\n\r\n        // Background and image styling\r\n        const background = this.css({\r\n            class: \"background\",\r\n            widthPercent: 100,\r\n            background: \"black100\",\r\n            height: \"100vh\",\r\n        });\r\n\r\n        const itemContainer = this.css({\r\n            class: \"itemContainer\",\r\n            display: \"flex\",\r\n            media: {\r\n                breakpoint: 600,\r\n                flexDirection: \"column\",\r\n                alignItems: \"centre\"\r\n            }\r\n        });\r\n\r\n        const imageBackground = this.css({\r\n            class: \"backgroundImage\",\r\n            widthPercent: 100,\r\n            height: \"100vh\",\r\n            paddingLeft: 400,\r\n            media: {\r\n                breakpoint: 600,\r\n                height: \"40vh\",\r\n                margin: 0,\r\n                padding: 0\r\n            }\r\n        });\r\n\r\n        const image = this.css({\r\n            class: \"image\",\r\n            widthPercent: 100,\r\n            heightPercent: 100,\r\n            objectFit: \"cover\"\r\n        });\r\n        \r\n        // Login modal styling\r\n        const modal = this.css({\r\n            class: \"modal\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            width: 500,\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            zIndex: 800,\r\n            padding: 20,\r\n            borderRadius: 14,\r\n            marginLeft: 100,\r\n            marginTop: 100,\r\n            media: {\r\n                breakpoint: 600,\r\n                width: \"auto\",\r\n                margin: 0,\r\n                marginTop: 200\r\n            }\r\n        });\r\n\r\n        const inputs = this.css({\r\n            class: \"inputs\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            gap: 10,\r\n            padding: [20, 0, 40, 0]\r\n        });\r\n\r\n        // Link\r\n\r\n        const link = this.css({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            textDecoration: \"underline\",\r\n            cursor: \"pointer\"\r\n        });\r\n\r\n        const linkHover = this.css({\r\n            class: \"link\",\r\n            pseudoClass: \"hover\",\r\n            colour: \"black100\"\r\n        });\r\n\r\n        const textContainer = this.css({\r\n            class: \"textContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            gap: 5\r\n        });\r\n\r\n        const title = this.css({\r\n            class: \"title\",\r\n            fontWeight: \"bold\"\r\n        });\r\n\r\n        const text = this.css({\r\n            class: \"text\",\r\n            colour: \"black60\"\r\n        });\r\n        \r\n        const footer = this.css({\r\n            class: \"footer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            widthPercent: 100,\r\n            gap: 10\r\n        });\r\n\r\n    \r\n        return /* css */ `\r\n        ${background}\r\n        ${itemContainer}\r\n        ${imageBackground}\r\n        ${image}\r\n        ${modal}\r\n        ${inputs}\r\n        ${link}\r\n        ${linkHover}\r\n        ${textContainer}\r\n        ${title}\r\n        ${text}\r\n        ${footer}\r\n\r\n        `;\r\n    \r\n    }\r\n\r\n    openWindow() {\r\n\r\n        window.location.assign(\"/register\");\r\n    \r\n    }\r\n\r\n    async login(result, json) {\r\n\r\n        let data = await this.api.request(\"/login\", \"POST\", json);\r\n        \r\n        (data.status) ? result.innerHTML = data.message : result.innerHTML = data.error;\r\n    \r\n    }\r\n\r\n    hook() {\r\n\r\n        const compButton = this.shadowRoot.getElementById(\"submit\");\r\n        const result     = this.shadowRoot.getElementById(\"result\");\r\n        const email      = this.shadowRoot.getElementById(\"email\");\r\n        const pass       = this.shadowRoot.getElementById(\"password\");\r\n        \r\n        compButton.text = \"Login\";\r\n        email.label     = \"Email\";\r\n        email.prompt    = \"Enter email\";\r\n        pass.label      = \"Password\";\r\n        pass.type       = \"password\";\r\n        pass.prompt     = \"Enter password\";\r\n\r\n        compButton.addEventListener(\"click\", () => {\r\n            \r\n            let cookie   = \"true\";\r\n            let jsonData = {email : email.value, password : pass.value, consent: cookie};\r\n\r\n            this.login(result, jsonData);\r\n        \r\n        });\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this); \r\n\r\n    }\r\n  \r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/login.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/register.js":
/*!*****************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/register.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Register: () => (/* binding */ Register)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Register extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    name_ = \"Register page\";\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"background\">\r\n\r\n            <div class=\"container\">\r\n\r\n                <div class=\"modal\">\r\n\r\n                    <form class=\"formObj\" action=\"https://whondo.com/register\", method=\"POST\">\r\n\r\n                        <!-- Personal information -->\r\n                        <div id=\"step1\">\r\n                            <div class=\"textContainer\">\r\n                                <p class=\"text\">Step 1/2</p>\r\n                                <h4 class=\"title\">Personal Details</h4> \r\n                            </div>\r\n\r\n                            <p class=\"text\">Let's find out a bit more about you!</p>\r\n\r\n                            <div class=\"input\">\r\n                                <div class=\"inputRow\">\r\n                                    <comp-input id=\"name\" name=\"name\"></comp-input>\r\n                                    <comp-input id=\"surname\" name=\"surname\"></comp-input>\r\n                                </div>\r\n                                \r\n                                <comp-input id=\"email\" name=\"email\"></comp-input>\r\n                                <comp-password id=\"password\" name=\"password\"></comp-password>\r\n                                <comp-password id=\"confirm\" name=\"confirm\"></comp-password>\r\n                            </div>\r\n\r\n                            <div class=\"footer\">\r\n                                <div class=\"btnRow\">\r\n                                    <comp-button class=\"back\" id=\"backBtn\" type=button></comp-button>\r\n                                    <comp-button class=\"next\" id=\"nextBtn\" type=button></comp-button>\r\n                                </div>\r\n                                <p>Have an account?<a href=\"/login\" class=\"link\"> Login</a></p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- User personalisation  -->\r\n                        <div id=\"step2\" hidden>\r\n\r\n                            <div class=\"textContainer\">\r\n                                <p class=\"text\">Step 2/2</p>\r\n                                <h4 class=\"title\">Personalise</h4> \r\n                            </div>\r\n\r\n                            <p class=\"text\">Let's find out a bit more about you!</p>\r\n\r\n                             <div class=\"inputRow\">\r\n                                <comp-input id=\"age\" name=\"age\"></comp-input>\r\n                                <comp-input id=\"occupation\" name=\"occupation\"></comp-input>\r\n                            </div>\r\n\r\n                            <div class=\"input\">\r\n                                <comp-textarea id=\"bio\" name=\"bio\"></comp-textarea>\r\n                                <comp-file id=\"picture\" name=\"picture\"></comp-file>\r\n                            </div>\r\n\r\n                            <div class=\"footer\">\r\n                                <div class=\"btnRow\">\r\n                                    <comp-button class=\"back\" id=\"backBtn2\" type=\"button\"></comp-button>\r\n                                    <comp-button class=\"submit\" id=\"submit\" type=\"submit\"></comp-button>\r\n                                </div>\r\n                                <p>Have an account?<a href=\"/login\" class=\"link\"> Login</a></p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div class=\"backgroundImage\">\r\n                <img class=\"image\" src=\"https://images.pexels.com/photos/4569340/pexels-photo-4569340.jpeg\">\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS(){\r\n        \r\n        const background = this.css({\r\n            class: \"background\",\r\n            width: \"100%\",\r\n            minHeight: \"100vh\",\r\n            background: \"black100\",     \r\n            overflow: \"hidden\",\r\n            media: {\r\n                breakpoint: 600,\r\n                height: 1000\r\n            }      \r\n        });\r\n\r\n        const form = this.css({\r\n            class: \"formObj\",\r\n            widthPercent: 100,\r\n        });\r\n        \r\n        const container = this.css({\r\n            class: \"container\",\r\n            display: \"flex\",\r\n            media: {\r\n                breakpoint: 600,\r\n                flexDirection: \"column\",\r\n                alignItems: \"centre\"\r\n            }\r\n        });\r\n\r\n        const backgroundImage = this.css({\r\n            class: \"backgroundImage\",\r\n            widthPercent: 100,\r\n            height: 1000,\r\n            paddingLeft: 400,\r\n            media: {\r\n                breakpoint: 600,\r\n                height: \"40vh\",\r\n                margin: 0,\r\n                padding: 0\r\n            }\r\n        });\r\n\r\n        const image = this.css({\r\n            class: \"image\",\r\n            widthPercent: 100,\r\n            heightPercent: 100,\r\n            objectFit: \"cover\"\r\n        });\r\n\r\n        const modal = this.css({\r\n            class: \"modal\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            widthPercent: 100,\r\n            maxWidth: 500,  \r\n            minWidth: 320,\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            zIndex: 800,\r\n            padding: 20,\r\n            borderRadius: 14,\r\n            marginLeft: 100,\r\n            marginTop: 150,\r\n            media: {\r\n                breakpoint: 600,\r\n                widthPercent: 100,\r\n                maxWidth: 350,\r\n                minWidth: 250,\r\n                margin: 0,\r\n                marginTop: 150,\r\n                boxSizing: \"border-box\"\r\n            }\r\n        });\r\n\r\n        const input = this.css({\r\n            class: \"input\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            gap: 20,\r\n            padding: [20, 0, 40, 0],\r\n            media: {\r\n                breakpoint: 600,\r\n                padding: [10, 0, 20, 0],\r\n                gap: 15,\r\n            } \r\n        });\r\n\r\n        const inputRow = this.css({\r\n            class: \"inputRow\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            gap: 15,\r\n            widthPercent: 100,\r\n            justifyContent: \"space-between\",\r\n            media: {\r\n                breakpoint: 600,\r\n                flexDirection: \"column\"\r\n            }\r\n        });\r\n\r\n        const btnRow = this.css({\r\n            class: \"btnRow\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            gap: 15,\r\n            widthPercent: 100,\r\n            justifyContent: \"space-between\"\r\n        });\r\n\r\n        const title = this.css({\r\n            class: \"title\",\r\n            fontWeight: \"bold\"\r\n        });\r\n\r\n        const link = this.css({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            fontWeight: \"bold\", \r\n            textDecoration: \"underline\",\r\n            cursor: \"pointer\",\r\n        });\r\n\r\n        const linkHover = this.css({\r\n            class: \"link\",\r\n            pseudoClass: \"hover\",\r\n            colour: \"black100\",\r\n        });\r\n\r\n        const textContainer = this.css({\r\n            class: \"textContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            gap: 5,\r\n        });\r\n\r\n        const text = this.css({\r\n            class: \"text\",\r\n            colour: \"black60\",\r\n            display: \"flex\",\r\n            alignSelf: \"start\",\r\n            \r\n        });\r\n\r\n        const footer = this.css({\r\n            class: \"footer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            widthPercent: 100,\r\n            gap: 10,\r\n        });\r\n\r\n        const inputError = this.css({\r\n            class: \"input-error\",\r\n            colour: \"red\",\r\n            fontSize: 12,\r\n            marginTop: 4,\r\n        });\r\n\r\n        return /* css */ `\r\n        ${background}\r\n        ${container}\r\n        ${form}\r\n        ${backgroundImage}\r\n        ${image}\r\n        ${modal}\r\n        ${input}\r\n        ${inputRow}\r\n        ${btnRow}\r\n        ${link}\r\n        ${linkHover}\r\n        ${inputError}\r\n        ${textContainer}\r\n        ${title}\r\n        ${text}\r\n        ${footer}\r\n        \r\n        `;\r\n\r\n    }\r\n\r\n    /**\r\n     * Helper method validates password inputs.\r\n     * @param {string} input1 \r\n     * @param {string} input2 \r\n     * @returns Valid status\r\n     */\r\n    checkPassword(input1, input2) {\r\n\r\n        return (input1.value.trim() == input2.value.trim()) ? true : false;\r\n    \r\n    }\r\n\r\n    /**\r\n     * Helper method validates a list of all inputs and returns valid status.\r\n     * @param {Array<HTMLElement>} inputs \r\n     * @returns Valid status\r\n     */\r\n    validateElements(inputs) {\r\n\r\n        let isValid = true;\r\n        for(let i in inputs){\r\n\r\n            if(inputs[i].required && inputs[i].isEmpty()){\r\n\r\n                const inputField = inputs[i].shadowRoot.querySelector(\".inputValue\");\r\n                inputField.classList.add(\"error\");\r\n                isValid = false;\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        return (!this.checkPassword(inputs[3], inputs[4])) ? false : isValid;\r\n    \r\n    }\r\n\r\n    /**\r\n     * Method validates if passwords match.\r\n     * @param {*} password \r\n     * @param {*} confirmPass \r\n     * @returns Valid status\r\n     */\r\n    validatePasswords(password, confirmPass) {\r\n\r\n        if (confirmPass.value == '' || password.value == '') return;\r\n        else if (confirmPass.value === password.value) confirmPass.shadowRoot.querySelector(\".inputValue\").classList.add(\"success\");\r\n        else confirmPass.shadowRoot.querySelector(\".inputValue\").classList.remove(\"success\");\r\n    \r\n    }\r\n\r\n    validateInputs(inputs, state) {\r\n\r\n        if (state) {\r\n\r\n            for (let i in inputs) inputs[i].shadowRoot.querySelector(\".inputValue\").classList.add(\"error\");\r\n        \r\n        } else {\r\n\r\n            for (let i in inputs) inputs[i].shadowRoot.querySelector(\".inputValue\").classList.remove(\"error\");\r\n        \r\n        }\r\n    \r\n    }\r\n\r\n    clearError(inputs){\r\n\r\n        const field = inputs.shadowRoot.querySelector(\".inputValue\");\r\n        field.classList.remove(\"error\");\r\n\r\n    };\r\n\r\n    async register(){\r\n\r\n        const fd = new FormData();\r\n\r\n        const name = this.shadowRoot.getElementById(\"name\");\r\n        const email = this.shadowRoot.getElementById(\"email\");\r\n        const password = this.shadowRoot.getElementById(\"password\");\r\n        const age = this.shadowRoot.getElementById(\"age\");\r\n        const occupation  =this.shadowRoot.getElementById(\"occupation\");\r\n        const bio = this.shadowRoot.getElementById(\"bio\");\r\n        const picture = this.shadowRoot.getElementById(\"picture\");\r\n\r\n        fd.append(\"name\", name.value);\r\n        fd.append(\"email\", email.value);\r\n        fd.append(\"password\", password.value);\r\n        fd.append(\"age\", age.value);\r\n        fd.append(\"occupation\", occupation.value);\r\n        fd.append(\"bio\", bio.value);\r\n        \r\n        if (picture.value) {\r\n            fd.append(\"file\", picture.value, picture.value.name);\r\n        }\r\n\r\n        const result = await this.submitForm(\"https://whondo.com/register\", fd);\r\n        \r\n        if(result.ok) {\r\n            console.log(result.status);\r\n\r\n        } else {\r\n            console.log(result.error);\r\n        }\r\n    }\r\n\r\n    hook(){\r\n\r\n        const step1        = this.shadowRoot.getElementById(\"step1\");\r\n        const step2        = this.shadowRoot.getElementById(\"step2\");\r\n        const backButton   = this.shadowRoot.getElementById(\"backBtn\");\r\n        const backBtn2     = this.shadowRoot.getElementById(\"backBtn2\");\r\n        const nextButton   = this.shadowRoot.getElementById(\"nextBtn\");\r\n        const submitButton = this.shadowRoot.getElementById(\"submit\");\r\n        const email        = this.shadowRoot.getElementById(\"email\");\r\n        const password     = this.shadowRoot.getElementById(\"password\");\r\n        const confirmPass  = this.shadowRoot.getElementById(\"confirm\");\r\n        const name         = this.shadowRoot.getElementById(\"name\");\r\n        const surname      = this.shadowRoot.getElementById(\"surname\");\r\n        const age          = this.shadowRoot.getElementById(\"age\");\r\n        const occupation   = this.shadowRoot.getElementById(\"occupation\");\r\n        const bio          = this.shadowRoot.getElementById(\"bio\");\r\n        const picture      = this.shadowRoot.getElementById(\"picture\");\r\n        \r\n        backButton.text      = \"Back\";\r\n        backButton.variant   = 2;\r\n        backBtn2.text        = \"Back\";\r\n        backBtn2.variant     = 2;\r\n        nextButton.text      = \"Next\";\r\n        nextButton.variant   = 1;\r\n        submitButton.text    = \"Register\";\r\n        submitButton.variant = 1;\r\n        \r\n        /**\r\n         * Form inputs and required fields\r\n         */\r\n        email.label            = \"Email\";\r\n        email.prompt           = \"Enter email\";\r\n        email.type             = \"email\";\r\n        password.label         = \"Password\";\r\n        password.prompt        = \"Password\";\r\n        password.enableEntropy = true;\r\n        confirmPass.label      = \"Confirm Password\";\r\n        confirmPass.prompt     = \"Confirm password\";\r\n        name.label             = \"Name\";\r\n        name.prompt            = \"Enter name\";\r\n        surname.label          = \"Surname\";\r\n        surname.prompt         = \"Enter surname\";\r\n        age.label              = \"Age\";\r\n        age.prompt             = \"Enter your age\";\r\n        age.type               = \"number\";\r\n        occupation.label       = \"Occupation\";\r\n        occupation.prompt      = \"Eg. student\";\r\n        occupation.type        = \"text\";\r\n        bio.label              = \"Bio\";\r\n        bio.prompt             = \"Tell us more about you...\";\r\n        bio.type               = \"textarea\";\r\n        picture.label          = \"Profile picture\";\r\n        picture.prompt         = \"Upload photo\";\r\n        picture.type           = \"file\";\r\n\r\n        name.required        = true;\r\n        surname.required     = true;\r\n        email.required       = true;\r\n        password.required    = true;\r\n        confirmPass.required = true;\r\n\r\n        /**\r\n         * Event listener checks for all inputs to be valid, if so then the step 2 modal is revealed.\r\n         */\r\n        nextButton.addEventListener(\"click\", () => {\r\n\r\n            const inputs = [name, surname, email, password, confirmPass];\r\n\r\n            let valid = this.validateElements(inputs);\r\n\r\n            if (valid) {\r\n\r\n                step1.setAttribute(\"hidden\", \"\");\r\n                step2.removeAttribute(\"hidden\");\r\n            \r\n            } else this.validateInputs(inputs, true);\r\n        \r\n        });\r\n\r\n        /**\r\n         * Event listener reviews password entropy\r\n         */\r\n        confirmPass.addEventListener(\"input\", () => {\r\n            \r\n            this.validatePasswords(password, confirmPass);\r\n\r\n        });\r\n\r\n        /**\r\n         * Event listener removes password entropy check\r\n         */\r\n        password.addEventListener(\"input\", () => {\r\n            \r\n            this.validatePasswords(password, confirmPass);\r\n\r\n        });\r\n\r\n        /**\r\n         * @brief clear all input field status with when user type in the box\r\n         * clean ui\r\n         */\r\n        [name, surname, email, confirmPass].forEach(input => {\r\n\r\n            input.addEventListener(\"input\", () => {\r\n\r\n                this.clearError(input);\r\n\r\n            });\r\n\r\n        });\r\n\r\n        /**\r\n         * Returns user to step 1\r\n         */\r\n        backBtn2.addEventListener(\"click\", () => {\r\n            \r\n            step2.setAttribute(\"hidden\", \"\");\r\n            step1.removeAttribute(\"hidden\");\r\n        \r\n        });\r\n\r\n        submitButton.addEventListener(\"click\", (e) => {\r\n            e.preventDefault();\r\n            this.register();\r\n        } );\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/register.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/verified.js":
/*!*****************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/verified.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Verified: () => (/* binding */ Verified)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Verified extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    name_ = \"Verified\";\r\n       \r\n    createHTML() {\r\n\r\n        return /* html */`\r\n        <div class=\"background\">\r\n            \r\n            <div class=\"container\">\r\n                <!-- <svg class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" height=\"64px\" viewBox=\"0 -960 960 960\" width=\"64px\" fill=\"currentColor\"><path d=\"m424-296 282-282-56-56-226 226-114-114-56 56 170 170Zm56 216q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/></svg>\r\n                <h3 class=\"head\">Verified!</h3>\r\n                <p class=\"describe\">Welcome {{ email }}!<br>Your account has now been verified.</p> -->\r\n                <comp-dialog id=\"describe\"></comp-dialog>\r\n\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n        \r\n        const effect = this.effect.slideUp(20);\r\n        const prop   = this.effect.prop(\"slideUp\", .5);\r\n\r\n        const background = this.css({\r\n            class: \"background\",\r\n            display: \"flex\",\r\n            height: \"100vh\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            alignItems: \"centre\",\r\n            background: \"black10\",\r\n            justifyContent: \"centre\",\r\n            overflow: \"hidden\",\r\n            media: {\r\n                breakpoint: 600,\r\n                padding: 20,\r\n                width: \"auto\"\r\n            }\r\n        });\r\n\r\n        const container = this.css({\r\n            class: \"container\",\r\n            display: \"flex\",\r\n            background: \"white\",\r\n            animation: prop,\r\n            width: \"auto\",\r\n        });\r\n\r\n        \r\n        return /* css */`\r\n        ${effect}\r\n        ${background}\r\n        ${container}\r\n        \r\n        `;\r\n        \r\n    \r\n    }\r\n\r\n    hook() {\r\n        \r\n        const describe = this.shadowRoot.getElementById(\"describe\");\r\n        const btn      = this.shadowRoot.getElementById('btn');\r\n        const email    = this.getAttribute(\"email\") || \"User\";\r\n\r\n        const template  = `Welcome {{ email }}!<br>Your account has now been verified.`;\r\n        const finalText = template.replace(/{{\\s*email\\s*}}/g, email);\r\n\r\n        describe.svgIcon   = `xmlns=\"http://www.w3.org/2000/svg\" height=\"64px\" viewBox=\"0 -960 960 960\" width=\"64px\" fill=\"currentColor\"><path d=\"m424-296 282-282-56-56-226 226-114-114-56 56 170 170Zm56 216q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/`;\r\n        describe.title     = \"Verified!\";\r\n        describe.paragraph = finalText;\r\n    \r\n        btn.buttonText = \"Continue\";\r\n        \r\n    } \r\n    \r\n    static {jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);}\r\n\r\n}\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/verified.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/button.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/button.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ Button)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\r\n * Copyright (c) 2025 Josh Bassett, whondo.com\r\n * \r\n * Filename:    button.js\r\n * Author:      Josh Bassett\r\n * Date:        10/06/2025\r\n * Version:     1.0\r\n * \r\n * Description: Class that creates a reusable Button Comp.\r\n */\r\n\r\n\r\n\r\nclass Button extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    text_ = \"This is a button\";\r\n    variant_ = \"1\";   \r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button text.\r\n     * \r\n     * @param {string} newText\r\n     */\r\n    set text(newText) {\r\n\r\n        this.text_ = newText;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button variant (1, 2, 3).\r\n     * \r\n     * @param {string} newVariant\r\n     */\r\n    set variant(newVariant) {\r\n\r\n        this.variant_ = newVariant;\r\n        this.update();\r\n    \r\n    }\r\n    \r\n    /**\r\n     * @brief A getter method that returns the Comp's button text.\r\n     * \r\n     * @returns {string} Comp's button text. \r\n     */\r\n    get text() {\r\n\r\n        return this.text_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button variant.\r\n     * \r\n     * @returns {number} Comp's button variant. \r\n     */\r\n    get variant() {\r\n\r\n        return this.variant_;\r\n    \r\n    }\r\n    \r\n    createHTML() {\r\n\r\n        \r\n        return /* html */ `\r\n            <button class=\"button\">${this.text_}</button>`;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        let button, buttonHover, buttonActive;\r\n\r\n        const primary = this.css({\r\n            class: \"button\",\r\n            colour: \"white\",\r\n            widthPercent: 100,\r\n            background: \"black100\",\r\n            padding: [12, 28],\r\n            border: \"black100\",\r\n            borderRadius: 8,\r\n            fontSize: 16,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const primaryHover = this.css({\r\n            class: \"button\",\r\n            pseudoClass: \"hover\",\r\n            border: \"black\",\r\n            background: \"black80\",\r\n        });\r\n\r\n        const primaryActive = this.css({\r\n            class: \"button\",\r\n            pseudoClass: \"active\",\r\n            border: \"black60\",\r\n            background: \"black60\"\r\n        });\r\n\r\n        const secondary = this.css({\r\n            class: \"button\",\r\n            colour: \"black100\",\r\n            background: \"black10\",\r\n            widthPercent: 100,\r\n            border: \"border\",\r\n            padding: [12, 28],\r\n            borderRadius: 8,\r\n            fontSize: 16,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const secondaryHover = this.css({\r\n            class: \"button\",\r\n            pseudoClass: \"hover\",\r\n            background: \"black20\"\r\n        });\r\n\r\n        const secondaryActive = this.css({\r\n            class: \"button\",\r\n            pseudoClass: \"active\",\r\n            background: \"black40\"\r\n        });\r\n        \r\n        if (this.variant_ == 1) {\r\n\r\n            button       = primary;\r\n            buttonHover  = primaryHover;\r\n            buttonActive = primaryActive;\r\n        \r\n        }\r\n        \r\n        else if (this.variant_ == 2) {\r\n\r\n            button       = secondary;\r\n            buttonHover  = secondaryHover;\r\n            buttonActive = secondaryActive;\r\n        \r\n        }\r\n\r\n        return `\r\n        ${button}\r\n        ${buttonHover}\r\n        ${buttonActive}\r\n        `;\r\n        \r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this); \r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/button.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/card.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/card.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Card: () => (/* binding */ Card)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\r\n * Copyright (c) 2025 Josh Bassett, whondo.com\r\n * \r\n * Filename:    card.js\r\n * Author:      Josh Bassett\r\n * Date:        10/06/2025\r\n * Version:     1.0\r\n * \r\n * Description: Class that creates a reusable Card Comp.\r\n */\r\n\r\n\r\n\r\nclass Card extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp { \r\n\r\n    cardTitle_    = \"Card header\";\r\n    cardText_     = \"Card text goes here.\";\r\n    buttonText_   = \"Card Action\";\r\n    buttonAction_ = this.debug;\r\n    cardImage_    = \"\";\r\n    name_ = \"Card\";\r\n       \r\n    /**\r\n     * @brief A setter method that sets the Comp's title.\r\n     * \r\n     * @param {string} newCardTitle\r\n     */\r\n    set cardTitle(newCardTitle) {\r\n       \r\n        this.cardTitle_ = newCardTitle;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's text.\r\n     * \r\n     * @param {string} newCompText\r\n     */\r\n    set cardText(newCompText) {\r\n\r\n        this.cardText_ = newCompText;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button text.\r\n     * \r\n     * @param {string} newButtonText\r\n     */\r\n    set buttonText(newButtonText) {\r\n\r\n        this.buttonText_ = newButtonText;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button link.\r\n     * \r\n     * @param {string} newButtonAction\r\n     */\r\n    set buttonAction(newButtonAction) {\r\n\r\n        this.buttonAction_ = newButtonAction;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's image link.\r\n     * \r\n     * @param {string} newCardImage\r\n     */\r\n    set cardImage(newCardImage) {\r\n\r\n        this.cardImage_ = newCardImage;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's title.\r\n     * \r\n     * @returns {string} Comp's title. \r\n     */\r\n    get cardTitle() {\r\n\r\n        return this.cardTitle_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's text.\r\n     * \r\n     * @returns {string} Comp's text. \r\n     */\r\n    get cardText() {\r\n\r\n        return this.cardText_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button text.\r\n     * \r\n     * @returns {string} Comp's button text. \r\n     */\r\n    get buttonText() {\r\n\r\n        return this.buttonText_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button link.\r\n     * \r\n     * @returns {string} Comp's button link. \r\n     */\r\n    get buttonAction() {\r\n        \r\n        return this.buttonAction_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's card image.\r\n     * \r\n     * @returns {string} Comp's card image. \r\n     */\r\n    get cardImage() {\r\n\r\n        return this.cardImage_;\r\n    \r\n    }\r\n    \r\n    /**\r\n     * @brief A method that builds the card's HTML.\r\n     * \r\n     * @returns {literal} HTML to be injected into Comp. \r\n     */\r\n    createHTML() {\r\n\r\n        let imageHTML = '';\r\n\r\n        if (this.cardImage_) imageHTML = /* html */`<img src=\"${this.cardImage_}\">`;\r\n\r\n        return /* html */ `\r\n        <div class=\"cardContainer\">\r\n            ${imageHTML}\r\n            <div class=\"textContainer\">\r\n                <h2>${this.cardTitle_}</h2>\r\n                <p>${this.cardText_}</p>\r\n            </div>\r\n            <comp-button id=\"button\"></comp-button>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that builds the card's CSS.\r\n     * \r\n     * @returns {literal} CSS to be injected into Comp.\r\n     */\r\n    createCSS() {\r\n        \r\n        const cardStyle = this.design.create({\r\n            valueID: \"cardContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n            widthPercent: 100, \r\n            maxWidth: 500, \r\n            padding: 20,\r\n            alignItems: \"start\",\r\n            border: true,\r\n            borderRadius: 15,\r\n            gap: 20,\r\n            background: \"white\"\r\n        });\r\n\r\n        const textCardStyle = this.design.create({\r\n            valueID: \"textContainer\",\r\n            direction: \"column\", \r\n            widthPercent: 100,\r\n            maxWidth: 500, \r\n            padding: 0, \r\n            alignItems: \"start\", \r\n            border: false\r\n        });\r\n\r\n        return `\r\n        ${cardStyle}\r\n        ${textCardStyle}\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that opens a new page, with Safari support.\r\n     * \r\n     * @param {any} event \r\n     */\r\n    onButtonClick(event) {\r\n\r\n        event.preventDefault();\r\n \r\n        this.buttonAction_();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that runs a build hook when the Component is rendered it\r\n     *        provides the inner JavaScript logic for the Comp. \r\n     */\r\n    hook() {\r\n\r\n        const cardButton   = this.shadowRoot.getElementById(\"button\");\r\n        cardButton.variant = 2;\r\n\r\n        cardButton.addEventListener(\"click\", this.onButtonClick.bind(this));\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/card.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/dialog.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/dialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dialog: () => (/* binding */ Dialog)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Dialog extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n     \r\n    title_     = \"Hello World\";\r\n    paragraph_ = \"This is a paragraph\";\r\n    svgIcon_   = \"\";\r\n    text_ = \"This is a button\";\r\n\r\n    set title(newTitle){\r\n\r\n        this.title_ = newTitle;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set paragraph(value){\r\n\r\n        this.paragraph_ = value;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set svgIcon(value){\r\n\r\n        this.svgIcon_ = value;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set text(value){\r\n\r\n        this.text = value;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    get paragraph() {\r\n\r\n        return this.paragraph_;\r\n    \r\n    }\r\n\r\n    get title() {\r\n\r\n        return this.title_;\r\n    \r\n    }\r\n\r\n    get svgIcon() {\r\n\r\n        return this.svgIcon_;\r\n    \r\n    }\r\n\r\n    get text(){\r\n\r\n        return this.text_;\r\n    \r\n    }\r\n\r\n    hideButton() {\r\n\r\n        requestAnimationFrame(() => {\r\n\r\n            const btn = this.shadowRoot?.querySelector(\"comp-button\");\r\n            if (btn) btn.setAttribute(\"hidden\", \"\");\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    showButton() {\r\n\r\n        requestAnimationFrame(() => {\r\n\r\n            const btn = this.shadowRoot?.querySelector(\"comp-button\");\r\n            if (btn) btn.removeAttribute(\"hidden\");\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n            <div class=\"background\">\r\n\r\n                <div class=\"container\">\r\n\r\n                    <!--svg logo go here-->\r\n                    <svg class=\"icon\" ${this.svgIcon_}></svg>\r\n                    <h3 class=\"head\">${this.title_}</h3>\r\n                    <p class=\"dialog\">${this.paragraph_}</p>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const background = this.css({\r\n            class: \"background\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            height: \"100vh\",\r\n            alignItems: \"centre\",\r\n            border: false,\r\n            gap: 0,\r\n            background: \"black10\",\r\n            justifyContent: \"centre\",\r\n        });\r\n\r\n        const container = this.css({\r\n            class: \"container\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"auto\",\r\n            maxWidth: 500,\r\n            padding: 20,\r\n            alignItems: \"centre\",\r\n            border: \"border\",\r\n            borderRadius: 16,\r\n            gap: 10,\r\n            background: \"white\",\r\n            textAlign: \"start\",\r\n            marginTop: 0,\r\n        });\r\n\r\n        const head = this.css({\r\n            class: \"head\",\r\n            fontSize: 24,\r\n            alignSelf: \"center\",\r\n        });\r\n\r\n        const dialog = this.css({\r\n            class: \"dialog\",\r\n            fontSize: 16,\r\n            textAlign: \"start\",\r\n        });\r\n\r\n        const icon = this.css({\r\n            class: \"icon\",\r\n            colour: \"black80\",\r\n        });\r\n\r\n        const media = this.css({\r\n            media: {\r\n                breakpoint: 600,\r\n                padding: 20,\r\n                width: 350\r\n            }\r\n        });\r\n\r\n        return /* css */ `\r\n            ${background}\r\n            ${container}\r\n            ${icon}\r\n            ${head}\r\n            ${dialog}\r\n            ${media}\r\n        `;\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/dialog.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/icon.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/icon.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Icon: () => (/* binding */ Icon)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Icon extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n        \r\n    path_ = \"\";\r\n    name_ = \"Icon\";\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.host({width: \"auto\"});\r\n    \r\n    }\r\n       \r\n    set path(newPath) {\r\n\r\n        this.path_ = newPath;\r\n        this.update();\r\n    \r\n    }\r\n    \r\n    get path() {\r\n\r\n        return this.path_;\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <img class=\"icon\" src=\"/static/icons/${this.path_}\">\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const icon = this.design.create({\r\n            class: \"icon\",\r\n            display: \"flex\",\r\n            border: \"borderDefault\",\r\n            borderRadius: 8,\r\n            width: \"auto\",\r\n            padding: 5,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const iconHover = this.design.create({\r\n            class: \"icon\",\r\n            pseudoClass: \"hover\",\r\n            background: \"black10\",\r\n            border: \"border\"\r\n        });\r\n\r\n        const iconActive = this.design.create({\r\n            class: \"icon\",\r\n            pseudoClass: \"active\",\r\n            background: \"black20\"\r\n        });\r\n        \r\n        return /* css */ `\r\n        ${icon}\r\n        ${iconHover}\r\n        ${iconActive}\r\n        `;\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/icon.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/inputs/file.js":
/*!***************************************************!*\
  !*** ./app/static/jay-comps/comps/inputs/file.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   File: () => (/* binding */ File)\n/* harmony export */ });\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/inputs/input.js\");\n\r\n\r\nclass File extends _input_js__WEBPACK_IMPORTED_MODULE_0__.Input {\r\n  \r\n    type_ = \"file\";\r\n    name_ = \"File Comp\";\r\n       \r\n    createHTML(){\r\n\r\n        return /* html */`\r\n           \r\n        <div class=\"inputContainer\">\r\n            <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n            <div class=\"fileWrapper\">\r\n                <div class=\"fileBox\">\r\n                    <img class=\"filePreview\" src=\"\" hidden/>\r\n                    <span class=\"icon\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"currentColor\">\r\n                            <path d=\"M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z\"/>\r\n                        </svg>\r\n                    </span>\r\n                    <span class=\"filePrompt\">${this.prompt_}</span>\r\n                    <input class=\"inputValue fileInput\" type=\"file\" accept=\"image/png, image/jpeg, image/jpg\" hidden />\r\n                    <comp-button class=\"reuploadBtn\" hidden></comp-button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS(){\r\n       \r\n        const fileStyle = this.css({\r\n            class: \"fileInput\",\r\n            display: \"none\",\r\n        });\r\n\r\n        const fileWrapper = this.css({\r\n            class: \"fileWrapper\",\r\n            widthPercent: 100,\r\n            cursor: \"pointer\"\r\n        });\r\n\r\n        const fileBox = this.css({\r\n            class: \"fileBox\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            justifyContent: \"centre\",\r\n            widthPercent: 100,\r\n            maxWidthPercent: 100,\r\n            padding: 20,\r\n            border: \"2px\",\r\n            borderRadius: \"12px\",\r\n            borderStyle: \"dotted\",\r\n            background: \"white\",\r\n            gap: 8,\r\n            boxSizing: \"border-box\",\r\n            textAlign: \"centre\"\r\n        });\r\n\r\n        const icon = this.css({\r\n            class: \"icon\",\r\n            fontSize: \"2rem\",\r\n            fontWeight: \"bold\",\r\n            colour: \"black80\",\r\n        });\r\n\r\n        const filePrompt = this.css({\r\n            class: \"filePrompt\",\r\n            fontSize: \"0.9rem\",\r\n            colour: \"black60\",\r\n            media: {\r\n                breakpoint: 600,\r\n                fontSize: \"0.8rem\",\r\n                wordWrap: \"break-word\",\r\n                maxWidth: 120\r\n            }\r\n\r\n        });\r\n        \r\n        const fileHover = this.css({\r\n            class: \"fileBox\",\r\n            pseudoClass: \"hover\",\r\n            outline: [\"solid\", 2, \"var(--black60)\"]\r\n        });\r\n\r\n        const fileActive = this.css({\r\n            class: \"fileBox\",\r\n            pseudoClass: \"focus\",\r\n            outline: [\"solid\", 2, \"var(--black100)\"]\r\n        });\r\n\r\n        const filesBoxDrag = this.css({\r\n            class: \"dragover\",\r\n            outline: [\"solid\", 2, \"var(--black100)\"],\r\n            background: \"back10\",\r\n        });\r\n\r\n        const filePreview = this.css({\r\n            class: \"filePreview\",\r\n            width: \"auto\",             \r\n            maxWidth: \"150px\",       \r\n            maxHeight: \"150px\",        \r\n            objectFit: \"cover\",\r\n            display: \"block\",\r\n            marginTop: 8,\r\n            marginLeft: \"auto\",        \r\n            marginRight: \"auto\",\r\n            borderRadius: 6,\r\n            media: {\r\n                breakpoint: 600,\r\n                maxWidth: \"100px\",     \r\n                maxHeight: \"100px\",\r\n                marginTop: 8,\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\",\r\n                maxWidthPercent: 100,\r\n                height: \"auto\",\r\n                objectFit: \"cover\",\r\n                borderRadius: 6\r\n            }\r\n        });\r\n\r\n        const reuploadBtn = this.css({\r\n            class: \"reuploadBtn\",\r\n            width: \"auto\",\r\n            marginTop: 12,\r\n            media: {\r\n                breakpoint: 600,\r\n                marginTop:  8,\r\n                width: \"auto\",\r\n            }\r\n        });\r\n\r\n        return /* css */`\r\n        ${fileWrapper}\r\n        ${fileBox}\r\n        ${icon}\r\n        ${filePrompt}\r\n        ${fileStyle}\r\n        ${fileHover}\r\n        ${fileActive}\r\n        ${filesBoxDrag}\r\n        ${filePreview}\r\n        ${reuploadBtn}\r\n\r\n        `; \r\n    \r\n    }\r\n\r\n    get value() {\r\n        return this.fileInput?.files?.[0] || null ;\r\n    }\r\n\r\n    hook() {\r\n\r\n        const filePrompt  = this.shadowRoot.querySelector(\".filePrompt\");\r\n        const icon        = this.shadowRoot.querySelector(\".icon\");\r\n        const preview     = this.shadowRoot.querySelector(\".filePreview\");\r\n        const dropArea    = this.shadowRoot.querySelector(\".fileBox\");\r\n        const reuploadBtn = this.shadowRoot.querySelector(\".reuploadBtn\");\r\n\r\n        reuploadBtn.text     = \"Upload another\";\r\n        reuploadBtn. variant = 2;\r\n\r\n        const handleFile = (file) => {\r\n\r\n            if (!file) return;\r\n\r\n            filePrompt.textContent = file.name;\r\n\r\n            if (file.type.startsWith(\"image/\")) {\r\n\r\n                const reader  = new FileReader();\r\n                reader.onload = () => {\r\n\r\n                    preview.src = reader.result;\r\n                    preview.removeAttribute(\"hidden\");\r\n                    icon.setAttribute(\"hidden\", \"\");\r\n                    reuploadBtn?.removeAttribute(\"hidden\");\r\n                \r\n                };\r\n                reader.readAsDataURL(file);\r\n            \r\n            }\r\n        \r\n        };\r\n\r\n        const createInput = () => {\r\n\r\n            const input     = document.createElement(\"input\");\r\n            input.type      = \"file\";\r\n            input.className = \"inputValue fileInput\";\r\n            input.accept    = \"image/png, image/jpeg, image/jpg\";\r\n            input.hidden    = true;\r\n\r\n            input.addEventListener(\"change\", () => {\r\n\r\n                if (input.files?.[0]) {\r\n\r\n                    this._fileInput = input;\r\n                    handleFile(input.files[0]);\r\n                \r\n                }\r\n            \r\n            });\r\n\r\n            return input;\r\n        \r\n        };\r\n\r\n        this._fileInput = this.shadowRoot.querySelector(\".fileInput\");\r\n\r\n        if (this._fileInput) {\r\n\r\n            this._fileInput.addEventListener(\"change\", () => {\r\n\r\n                if (this._fileInput.files?.[0]) {\r\n\r\n                    handleFile(this._fileInput.files[0]);\r\n                \r\n                }\r\n            \r\n            });\r\n\r\n        }\r\n\r\n        \r\n        dropArea?.addEventListener(\"click\", () => {\r\n\r\n            this._fileInput?.click();\r\n        \r\n        });\r\n\r\n        dropArea?.addEventListener(\"dragover\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.add(\"dragover\");\r\n        \r\n        });\r\n\r\n        dropArea?.addEventListener(\"dragleave\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.remove(\"dragover\");\r\n        \r\n        });\r\n\r\n        dropArea?.addEventListener(\"drop\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.remove(\"dragover\");\r\n\r\n            const file = e.dataTransfer.files[0];\r\n            if (file) {\r\n\r\n                this._fileInput?.remove(); \r\n                const input = createInput();\r\n                dropArea.appendChild(input);\r\n                this._fileInput = input;\r\n\r\n                \r\n                Object.defineProperty(input, 'files', {\r\n                    value: e.dataTransfer.files,\r\n                    writable: false\r\n                });\r\n                input.dispatchEvent(new Event(\"change\"));\r\n            \r\n            }\r\n        \r\n        });\r\n\r\n        reuploadBtn?.addEventListener(\"click\", (e) => {\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            this._fileInput?.remove();\r\n\r\n            const newInput = createInput();\r\n            dropArea.appendChild(newInput);\r\n            this._fileInput = newInput;\r\n\r\n            setTimeout(() => newInput.click(), 10);\r\n        \r\n        });\r\n\r\n\r\n    }\r\n\r\n    static {\r\n\r\n        super.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/inputs/file.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/inputs/input.js":
/*!****************************************************!*\
  !*** ./app/static/jay-comps/comps/inputs/input.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Input: () => (/* binding */ Input)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Input extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    label_    = \"Label\";\r\n    type_     = \"text\";\r\n    prompt_   = \"Enter text\";\r\n    required_ = false;\r\n    error_    = false;\r\n\r\n    name_ = \"Input\";\r\n\r\n    set label(newLabel) {\r\n\r\n        this.label_ = newLabel;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set type(newType) {\r\n\r\n        this.type_ = newType;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set prompt(newPrompt) {\r\n\r\n        this.prompt_ = newPrompt;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    set required (flag){\r\n\r\n        this.required_ = flag;\r\n        this.update();\r\n\r\n    }\r\n\r\n    get label() {\r\n\r\n        return this.label_;\r\n    \r\n    }\r\n\r\n    get type() {\r\n\r\n        return this.type_;\r\n    \r\n    }\r\n\r\n    get prompt() {\r\n\r\n        return this.prompt_;\r\n    \r\n    }\r\n\r\n    get value() {\r\n\r\n        return this.shadowRoot.querySelector(\"input, textarea\").value;\r\n\r\n    }\r\n\r\n    get required(){\r\n\r\n        return this.required_;\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"inputContainer\">\r\n            <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n            <input class=\"inputValue\" type=\"${this.type_}\" placeholder=\"${this.prompt_}\">\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const inputContainer = this.css({\r\n            class: \"inputContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            widthPercent: 100,\r\n            maxWidth: \"none\",\r\n            padding: 0,\r\n            alignItems: \"start\",\r\n            gap: 10,\r\n            background: \"--white\"\r\n        });\r\n\r\n        const input = this.css({\r\n            class: \"inputValue\",\r\n            display: \"block\",\r\n            fontSize: 16,\r\n            widthPercent: 100,\r\n            padding: [8, 12],\r\n            border: \"border\",\r\n            borderRadius: 8,\r\n            boxSizing: \"border-box\"\r\n        });\r\n\r\n        const inputHover = this.css({\r\n            class: \"inputValue\",\r\n            pseudoClass: \"hover\",\r\n            outline: [\"solid\", 2, \"var(--black60)\"]\r\n        });\r\n\r\n        const inputActive = this.css({\r\n            class: \"inputValue\",\r\n            pseudoClass: \"focus\",\r\n            outline: [\"solid\", 2, \"var(--black100)\"]\r\n        });\r\n\r\n        const statusRed = this.css({\r\n            class: \"error\",\r\n            borderBottom: [\"solid\", 2, \"var(--red100)\"]\r\n        });\r\n\r\n        const statusYellow = this.css({\r\n            class: \"warning\",\r\n            borderBottom: [\"solid\", 2, \"var(--yellow100)\"]\r\n        });\r\n\r\n        const statusGreen = this.css({\r\n            class: \"success\",\r\n            borderBottom: [\"solid\", 2, \"var(--green100)\"],\r\n        });\r\n\r\n        const hint = this.css({\r\n            class: \"hint\",\r\n            fontSize: \"0.75rem\",\r\n            colour: \"black\",\r\n            paddingTop: 4\r\n        });\r\n\r\n        return /* css */ `\r\n        \r\n        ${inputContainer}\r\n        ${input}\r\n        ${inputHover}\r\n        ${inputActive}\r\n        ${statusRed}\r\n        ${statusYellow}\r\n        ${statusGreen}\r\n        ${hint}\r\n        `;\r\n    \r\n    }\r\n\r\n    isEmpty(){\r\n\r\n        return !this.value.trim();\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/inputs/input.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/inputs/password.js":
/*!*******************************************************!*\
  !*** ./app/static/jay-comps/comps/inputs/password.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Password: () => (/* binding */ Password)\n/* harmony export */ });\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/inputs/input.js\");\n\r\n\r\nclass Password extends _input_js__WEBPACK_IMPORTED_MODULE_0__.Input {\r\n\r\n    enableEntropy_ = false; \r\n    name_ = \"Password Comp\";\r\n      \r\n    set entropy(flag){\r\n\r\n        this.enableEntropy_ = flag;\r\n        this.update();\r\n        \r\n    }\r\n\r\n    get entropy(){\r\n\r\n        return this.enableEntropy_;\r\n    \r\n    }\r\n\r\n    createHTML(){\r\n\r\n        return /* html */`\r\n            <div class=\"inputContainer\">\r\n\r\n                <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n                <input class=\"inputValue\" type=\"password\" placeholder=\"${this.prompt_}\">\r\n\r\n                <div class=\"hint\" style=\"display: none\">\r\n                    Hint: Use a mix of letters, numbers, and symbols\r\n                </div>\r\n            </div>\r\n        \r\n        `;\r\n        \r\n    }\r\n\r\n    set enableEntropy(flag) {\r\n\r\n        this.enableEntropy_ = flag;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    get enableEntropy() {\r\n\r\n        return this.enableEntropy_;\r\n    \r\n    }\r\n\r\n    calculateEntropy(password){\r\n\r\n        let poolSize = 0;\r\n        if(/[a-z]/.test(password)) poolSize += 26;\r\n        if(/[A-Z]/.test(password)) poolSize += 26;\r\n        if(/[0-9]/.test(password)) poolSize += 10;\r\n        if(/[^A-Za-z0-9]/.test(password)) poolSize += 32;\r\n\r\n        return password.length * Math.log2(poolSize || 1);\r\n    \r\n    }\r\n\r\n    validateInput(input, hint, entropy) {\r\n\r\n        entropy < 78 && entropy > 0 ? hint.style.display = \"block\" : hint.style.display = \"none\";\r\n        \r\n        if (entropy == 0) input.classList.remove(\"success\", \"warning\", \"error\");\r\n\r\n        else if ( entropy < 60) {\r\n\r\n            input.classList.add(\"error\");\r\n            hint.textContent = \"Weak: Try adding symbols, numbers or uppercase letters.\";\r\n            \r\n        } else if (entropy < 78) {\r\n\r\n            input.classList.add(\"warning\");\r\n            hint.textContent = \"Almost strong: Consider mixing symbols and length.\";\r\n            \r\n        } else if (entropy > 78) {\r\n\r\n            input.classList.add(\"success\");\r\n            \r\n        }\r\n    \r\n    }\r\n\r\n    hook(){\r\n\r\n        const input = this.shadowRoot.querySelector(\".inputValue\");\r\n        const hint  = this.shadowRoot.querySelector(\".hint\");\r\n\r\n        if (this.enableEntropy_){\r\n\r\n            input.addEventListener(\"input\", () => {\r\n\r\n                const entropy = this.calculateEntropy(input.value);\r\n                this.validateInput(input, hint, entropy);\r\n        \r\n            });\r\n\r\n        }\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        super.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/inputs/password.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/inputs/textarea.js":
/*!*******************************************************!*\
  !*** ./app/static/jay-comps/comps/inputs/textarea.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Textarea: () => (/* binding */ Textarea)\n/* harmony export */ });\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/inputs/input.js\");\n\r\n\r\nclass Textarea extends _input_js__WEBPACK_IMPORTED_MODULE_0__.Input {\r\n   \r\n    type_ = \"textarea\";\r\n    rows_ = 6;\r\n    name_ = \"Textarea Input\";\r\n\r\n    set rows(newRows) {\r\n\r\n        this.rows_ = newRows;\r\n        this.update();\r\n    \r\n    }\r\n\r\n    get rows() {\r\n\r\n        return this.rows_;\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"inputContainer\">\r\n            <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n            <textarea class=\"inputValue areaInput\" placeholder=\"${this.prompt_}\" rows=\"${this.rows_}\"></textarea>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const areaInput = this.design.create({\r\n            class: \"areaInput\",\r\n            resize: \"none\",\r\n            height: \"80px\",\r\n            widthPercent: 100,\r\n            border: \"border\",\r\n            borderRadius: 8,\r\n            boxSizing: \"border-box\",\r\n            padding: [8, 12],\r\n            fontFamily: \"Geist \",\r\n        });\r\n\r\n        return /* css */ `\r\n        ${areaInput}\r\n        `; \r\n    \r\n    }\r\n\r\n    static{\r\n\r\n        super.register(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/inputs/textarea.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/comps/navbar.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/navbar.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Navbar: () => (/* binding */ Navbar)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Navbar extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    lastScrollY = window.scrollY;\r\n    name_ = \"Navbar\";\r\n    \r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div id=\"navbar\" class=\"container\">\r\n            <a><h3 class=\"logo\">Whondo</h3></a>\r\n            <ul class=\"links\">\r\n                <li class=\"link\">About</li>\r\n                <li class=\"link\">Landlord Portal</li>\r\n                <li class=\"link\">GitHub</li>\r\n            </ul>\r\n            <comp-icon class=\"menu\" id=\"menu\"></comp-icon>\r\n            <div class=\"buttons\">\r\n                <comp-button id=\"register\"></comp-button>\r\n                <comp-button id=\"login\"></comp-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"tray\" class=\"tray\">\r\n            <div class=\"header\">\r\n                <a><h3 class=\"logo\">Whondo</h3></a>\r\n                <comp-icon class=\"close\" id=\"close\"></comp-icon>\r\n            </div>\r\n\r\n            <ul class=\"linksTray\">\r\n                <li class=\"link\">About</li>\r\n                <li class=\"link\">Landlord Portal</li>\r\n                <li class=\"link\">GitHub</li>\r\n            </ul>\r\n\r\n            <div class=\"trayButtons\">\r\n                <comp-button id=\"registerMob\"></comp-button>\r\n                <comp-button id=\"loginMob\"></comp-button>\r\n            </div>\r\n        </div>\r\n        \r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const container = this.css({\r\n            class: \"container\",\r\n            top: \"0\",\r\n            zIndex: \"1000\",\r\n            position: \"fixed\",\r\n            display: \"flex\",\r\n            alignItems: \"centre\",\r\n            widthPercent: 100,\r\n            background: \"white\",\r\n            boxSizing: \"border-box\",\r\n            padding: [10, 20],\r\n            justifyContent: \"space-between\",\r\n            transition: \"top 0.4s\"\r\n        });\r\n\r\n        const logo = this.css({\r\n            class: \"logo\",\r\n            fontWeight: \"bold\",\r\n            media: {\r\n                breakpoint: 600,\r\n                fontSize: 28\r\n            }\r\n        });\r\n\r\n        const links = this.css({\r\n            class: \"links\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"centre\",\r\n            gap: 20\r\n        });\r\n\r\n        // Navbar links\r\n        const link = this.css({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            fontSize: 16,\r\n            padding: 10,\r\n            border: \"borderDefault\",\r\n            borderRadius: 8,\r\n            listStyleType: \"None\",\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const linkHover = this.css({\r\n            class: \"link\",\r\n            colour: \"black100\",\r\n            pseudoClass: \"hover\",\r\n            border: \"border\",\r\n            background: \"black10\"\r\n        });\r\n\r\n        const linkActive = this.css({\r\n            class: \"link\",\r\n            pseudoClass: \"active\",\r\n            background: \"black20\"\r\n        });\r\n\r\n        const menu = this.css({\r\n            class: \"menu\",\r\n            display: \"None\",\r\n            media: {\r\n                breakpoint: 600,\r\n                display: \"block\"\r\n            }\r\n        });\r\n\r\n        const close = this.css({\r\n            class: \"close\",\r\n            display: \"None\",\r\n            media: {\r\n                breakpoint: 600,\r\n                display: \"block\"\r\n            }\r\n        });\r\n\r\n        const buttons = this.css({\r\n            class: \"buttons\",\r\n            display: \"flex\",\r\n            width: \"auto\",\r\n            gap: 20,\r\n            media: {\r\n                breakpoint: 600,\r\n                display: \"none\"\r\n            }\r\n        });\r\n\r\n        const hideTray = this.css({\r\n            class: \"tray\",\r\n            display: \"None\"\r\n        });\r\n\r\n        // Media quuery adjustments\r\n        const header = this.css({\r\n            media: {\r\n                breakpoint: 600,\r\n                class: \"header\",\r\n                display: \"flex\",\r\n                alignItems: \"centre\",\r\n                justifyContent: \"space-between\"\r\n            }\r\n        });\r\n\r\n        const linksMob = this.css({\r\n            media: {\r\n                breakpoint: 600,\r\n                class: \"links\",\r\n                display: \"None\"\r\n            }\r\n            \r\n        });\r\n\r\n        const tray = this.css({\r\n            media: {\r\n                breakpoint: 600,\r\n                class: \"tray\",\r\n                display: \"flex\",\r\n                bottom: \"-500px\",\r\n                position: \"fixed\",\r\n                zIndex: \"1000\",\r\n                boxSizing: \"border-box\",\r\n                flexDirection: \"column\",\r\n                widthPercent: 100,\r\n                background: \"white\",\r\n                padding: 20,\r\n                borderRadius: 14,\r\n                transition: \"bottom 0.6s\"\r\n            }\r\n            \r\n        });\r\n\r\n        const trayButtons = this.css({\r\n            media: {\r\n                breakpoint: 600,\r\n                class: \"trayButtons\",\r\n                display: \"flex\",\r\n                gap: 10,\r\n                paddingTop: 40\r\n            }\r\n           \r\n        });\r\n\r\n        return /* css */`\r\n        ${container}\r\n\r\n        ${logo}\r\n\r\n        ${links}\r\n        ${link}\r\n\r\n        /* Hide Icons */\r\n        ${menu}\r\n        ${close}\r\n\r\n        ${linkHover}\r\n        ${linkActive}\r\n\r\n        ${menu}\r\n        ${buttons}\r\n        ${hideTray}\r\n        ${header}\r\n        ${linksMob}\r\n        ${tray}\r\n        ${trayButtons}\r\n\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief Function hides/shows the navbar on scroll.\r\n     * \r\n     * The function takes the current Y position of the navbar and checks if the current pixel difference is greater than 20px.\r\n     * If so then the top is increased to hide the element then the last Y position is updated to reflect the change.\r\n     */\r\n    navbarScroll() {\r\n\r\n        const navbar     = this.shadowRoot.getElementById(\"navbar\");\r\n        const currentPos = window.scrollY;\r\n        \r\n        if (currentPos > this.lastScrollY && currentPos > 20) navbar.style.top = \"-80px\";\r\n        else navbar.style.top = \"0\";\r\n        \r\n        this.lastScrollY = currentPos;\r\n    \r\n    }\r\n\r\n    openMenu(offset) {\r\n\r\n        const tray        = this.shadowRoot.getElementById(\"tray\");\r\n        tray.style.bottom = offset;\r\n    \r\n    }\r\n\r\n    hook() {\r\n        \r\n        const register    = this.shadowRoot.getElementById(\"register\");\r\n        const login       = this.shadowRoot.getElementById(\"login\");\r\n        const menu        = this.shadowRoot.getElementById(\"menu\");\r\n        const close       = this.shadowRoot.getElementById(\"close\");\r\n        const loginMob    = this.shadowRoot.getElementById(\"loginMob\");\r\n        const registerMob = this.shadowRoot.getElementById(\"registerMob\");\r\n        \r\n        register.text       = \"Register\";\r\n        register.variant    = 2;\r\n        login.text          = \"login\";\r\n        menu.path           = \"menu.svg\";\r\n        close.path          = \"close.svg\";\r\n        loginMob.text       = \"Login\";\r\n        registerMob.text    = \"Register\";\r\n        registerMob.variant = 2;\r\n\r\n        window.addEventListener(\"scroll\", this.navbarScroll.bind(this));\r\n\r\n        menu.addEventListener(\"click\", () => {\r\n\r\n            this.openMenu(\"0\");\r\n        \r\n        });\r\n\r\n        close.addEventListener(\"click\", () => {\r\n\r\n            this.openMenu(\"-500px\");\r\n        \r\n        });\r\n    \r\n    }\r\n\r\n    static {\r\n\r\n        jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp.register(this); \r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/navbar.js?\n}");

/***/ }),

/***/ "./app/static/jay-comps/imports.js":
/*!*****************************************!*\
  !*** ./app/static/jay-comps/imports.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/* harmony import */ var _comps_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comps/button.js */ \"./app/static/jay-comps/comps/button.js\");\n/* harmony import */ var _comps_card_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./comps/card.js */ \"./app/static/jay-comps/comps/card.js\");\n/* harmony import */ var _comps_inputs_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comps/inputs/input.js */ \"./app/static/jay-comps/comps/inputs/input.js\");\n/* harmony import */ var _comps_dialog_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comps/dialog.js */ \"./app/static/jay-comps/comps/dialog.js\");\n/* harmony import */ var _comps_icon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comps/icon.js */ \"./app/static/jay-comps/comps/icon.js\");\n/* harmony import */ var _comps_navbar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./comps/navbar.js */ \"./app/static/jay-comps/comps/navbar.js\");\n/* harmony import */ var _comps_inputs_password_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./comps/inputs/password.js */ \"./app/static/jay-comps/comps/inputs/password.js\");\n/* harmony import */ var _comps_inputs_file_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./comps/inputs/file.js */ \"./app/static/jay-comps/comps/inputs/file.js\");\n/* harmony import */ var _comps_inputs_textarea_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./comps/inputs/textarea.js */ \"./app/static/jay-comps/comps/inputs/textarea.js\");\n/* harmony import */ var _comp_pages_login_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./comp-pages/login.js */ \"./app/static/jay-comps/comp-pages/login.js\");\n/* harmony import */ var _comp_pages_register_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./comp-pages/register.js */ \"./app/static/jay-comps/comp-pages/register.js\");\n/* harmony import */ var _comp_pages_verified_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./comp-pages/verified.js */ \"./app/static/jay-comps/comp-pages/verified.js\");\n/* harmony import */ var _comp_pages_create_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./comp-pages/create.js */ \"./app/static/jay-comps/comp-pages/create.js\");\n\r\n// Comp src file\r\n\r\n\r\n// Comps\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Pages\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/imports.js?\n}");

/***/ }),

/***/ "./node_modules/jay-comp/dist/api.js":
/*!*******************************************!*\
  !*** ./node_modules/jay-comp/dist/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API: () => (/* binding */ API)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    api.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.0\n *\n * Licence:     Apache 2.0\n */\n/**\n * # API\n *\n * Class for HTTP requests.\n *\n * ### Overview:\n * Provides a method `request` to abstract from JavaScript's `fetch` API.\n *\n * ### Methods:\n * - **request()**: Makes a GET or POST HTTP request.\n */\nclass API {\n    /**\n     * API perfoms a GET or POST HTTP Request.\n     *\n     * The method provides a nice abstraction to the fetch API to help developers\n     * focus on the response rather than the request details.\n     */\n    async request(url, method, data) {\n        if (method !== \"POST\" && method !== \"GET\") {\n            throw new Error(\"Unsupported or invalid method type\");\n        }\n        const options = {\n            method: method,\n            headers: { \"Content-Type\": \"application/json\" }\n        };\n        if (method === \"POST\")\n            options.body = JSON.stringify(data);\n        try {\n            const response = await fetch(url, options);\n            if (!response.ok)\n                throw new Error(`HTTP ERROR: Status: ${response.status}`);\n            return await response.json();\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n    }\n    /**\n     * Sends a `FormData` payload via POST using `fetch()`, returns parsed JSON.\n     */\n    async submitForm(url, formData) {\n        const init = {\n            method: \"POST\",\n            body: formData\n            // NOTE: fetch will auto-set the correct multipart boundary\n        };\n        const resp = await fetch(url, init);\n        if (!resp.ok) {\n            throw new Error(`HTTP ${resp.status} ${resp.statusText}`);\n        }\n        return resp.json();\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/api.js?\n}");

/***/ }),

/***/ "./node_modules/jay-comp/dist/comp.js":
/*!********************************************!*\
  !*** ./node_modules/jay-comp/dist/comp.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comp: () => (/* binding */ Comp)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"./node_modules/jay-comp/dist/api.js\");\n/* harmony import */ var _design_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./design.js */ \"./node_modules/jay-comp/dist/design.js\");\n/* harmony import */ var _effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./effects.js */ \"./node_modules/jay-comp/dist/effects.js\");\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    comp.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.4\n *\n * Licence:     Apache 2.0\n */\n\n\n\n/**\n * # Comp\n *\n * Abstract base class for custom elements that encapsulates Shadow DOM setup,\n * template rendering, styling, data fetching, and lifecycle hooks.\n *\n * ## Overview\n * This class handles the core lifecycle and utilities of a component:\n * - Attaches an open shadow root\n * - Injects HTML and CSS via `render()`\n * - Provides JSON and multipart HTTP helpers (`request()`, `submitForm()`)\n * - Offers a `css()` helper for building scoped styles\n * - Calls `hook()` after render to wire up interactivity\n *\n * Subclasses must override three methods:\n * - `createHTML(): string` — returns the component’s inner markup\n * - `createCSS(): string` — returns component-scoped CSS rules\n * - `hook(): void`      — runs after DOM/CSS injection to add event listeners or logic\n *\n * ## Properties\n * - **design** (`Design`) — style builder, including default host rules\n * - **api** (`API`)        — HTTP helper for JSON and form submissions\n * - **effect** (`Effects`) — animation and side-effect utility\n *\n * ## Methods\n * - **render(): void**\n *   Attaches HTML/CSS to the shadow root and then calls `hook()`.\n *\n * - **update(html?: string, css?: string): void**\n *   Re-injects optional overrides or regenerates via `createHTML()`/`createCSS()`.\n *\n * - **css(config: CSSConfig): string**\n *   Compiles a CSSConfig object into a CSS block.\n *\n * - **request<T>(url: string, method: \"GET\" | \"POST\", data?: object): Promise<T>**\n *   Sends a JSON GET/POST and returns the parsed response.\n *\n * - **submitForm<T>(url: string, data: HTMLFormElement \\| FormData \\| Record<string, any>): Promise<T>**\n *   Converts input into `FormData`, POSTS as multipart, and parses JSON.\n *\n * ## Example\n * ```js\n * class MyComp extends Comp {\n *   greeting_ = \"Hello, world!\";\n *\n *   createHTML(): string {\n *     return `<button class=\"btn\">${this.greeting_}</button>`;\n *   }\n *\n *   createCSS(): string {\n *     return this.css({\n *       class: \"btn\",\n *       background: \"blue100\",\n *       colour: \"white\",\n *       padding: [8, 16],\n *       borderRadius: 4,\n *       media: {\n *           size: 600,\n *           fontSize: 16\n *       }\n *     });\n *   }\n *\n *   hook(): void {\n *     const btn = this.shadowRoot!.querySelector(\"button\")!;\n *     btn.addEventListener(\"click\", () => alert(this.greeting));\n *   }\n *\n *   static { Comp.register(this); }\n * }\n * ```\n */\nclass Comp extends HTMLElement {\n    /**\n     * ## register\n     *\n     * Registers a `Comp` subclass as a custom element under the “comp-…” namespace.\n     *\n     * ### Behavior\n     * - Converts class name to kebab-case\n     * - Prefixes the result with `\"comp-\"`\n     * - Calls `customElements.define()` once, avoiding duplicate registrations\n     *\n     * ### Parameters\n     * - `ctor: typeof Comp`\n     *   The subclass constructor that you want to register.\n     *\n     * ### Errors\n     * Throws an `Error` if stripping “Comp” yields an empty string (i.e. the class is\n     * named just `\"Comp\"` or doesn’t end in `\"Comp\"`).\n     *\n     * ### Example\n     * ```ts\n     * export class UserLoginPageComp extends Comp {\n     *   // … your createHTML/createCSS/hook …\n     *\n     *   // auto-register at load time\n     *   static {\n     *     Comp.register(this);\n     *   }\n     * }\n     *\n     * // After import, <comp-user-login-page> is available in the DOM\n     * ```\n     */\n    static register(ctor) {\n        const raw = ctor.name;\n        if (!raw)\n            throw new Error(`Can't auto-derive tag for ${ctor.name}`);\n        const tag = \"comp-\" + raw\n            .replace(/([a-z0-9])([A-Z])/g, \"$1-$2\")\n            .toLowerCase();\n        if (!Comp._registry.has(tag)) {\n            customElements.define(tag, ctor);\n            Comp._registry.add(tag);\n        }\n    }\n    constructor() {\n        super();\n        this.api = new _api_js__WEBPACK_IMPORTED_MODULE_0__.API();\n        this.effect = new _effects_js__WEBPACK_IMPORTED_MODULE_2__.Effects();\n        this.design = new _design_js__WEBPACK_IMPORTED_MODULE_1__.Design();\n        this.attachShadow({ mode: \"open\" });\n        this.render();\n    }\n    /**\n     * ## host\n     *\n     * Overrides the default `:host` configuration.\n     *\n     * ### Behaviour:\n     * Nested components by default scale to fill the width of their parent due to\n     * the restrictions of Shadow DOM components.\n     *\n     * **Default config**\n     * ```css\n     *\n     * :host {display: block; width: 100%; box-sizing: border-box;}\n     * ```\n     *\n     * ### Parameters:\n     * - **css** (`string`): The new host CSS to be injected.\n     *\n     * ### Example:\n     * ```js\n     *\n     * class MyComp extends Comp {\n     *     constructor() {\n     *         super();\n     *         this.host({width: \"auto\", boxSizing: \"border-box\"});\n     *     }\n     * }\n     * ```\n     */\n    host(css) {\n        this.design.hostOverride = this.css(css);\n        this.render();\n        return this;\n    }\n    /**\n     * ## render\n     *\n     * Injects the component’s HTML and CSS into its shadow root and re-attaches logic.\n     *\n     * ### Behaviour\n     * - Calls `createHTML()` to get the latest HTML fragment.\n     * - Calls `createCSS()` to get the latest CSS string.\n     * - Sets `shadowRoot.innerHTML` to the combined template (via `createTemplate`).\n     * - If `hook()` is implemented, invokes it immediately after DOM injection.\n     * - Throws an Error if the shadow root is unavailable.\n     *\n     * ### Throws\n     * - `Error` if `this.shadowRoot` is `null` or undefined.\n     *\n     * ### Returns\n     * - `void`\n     *\n     * ### Example\n     * ```js\n     * // After subclass initialization, simply:\n     * this.render();\n     *\n     * // Or as part of a lifecycle:\n     * connectedCallback() {\n     *   // ensure all state is ready\n     *   this.render();\n     * }\n     * ```\n     */\n    render() {\n        if (!this.shadowRoot)\n            throw new Error(\"Shadow root is not available.\");\n        this.shadowRoot.innerHTML = this.createTemplate(this.createHTML(), this.createCSS());\n        if (typeof this.hook === \"function\")\n            this.hook();\n    }\n    /**\n     * ## update\n     *\n     * Re-renders the component by injecting fresh HTML and CSS into its shadow root.\n     *\n     * ### Behaviour\n     * - If both `newHTML` and `newCSS` are supplied, uses those values directly.\n     * - If either argument is omitted, calls the corresponding\n     *   `createHTML()` or `createCSS()` override to regenerate the missing piece.\n     * - Throws if the component’s shadow root is not attached.\n     * - After updating the DOM, invokes `hook()` so event listeners and other logic\n     *   are wired up again.\n     *\n     * ### Parameters\n     * - `newHTML?` (`string`): Optional HTML fragment to inject.\n     *   If omitted, runs `this.createHTML()`.\n     * - `newCSS?` (`string`): Optional CSS string to inject.\n     *   If omitted, runs `this.createCSS()`.\n     *\n     * ### Example\n     * ```js\n     * // Case 1: update both HTML and CSS explicitly\n     * this.update(\n     *   `<p>${this.message}</p>`,\n     *   this.css({ color: \"red\" })\n     * );\n     *\n     * // Case 2: regenerate from your subclass methods\n     * set message(text) {\n     *   this.message = text;\n     *   this.update();         // calls createHTML/createCSS internally\n     * }\n     * ```\n     */\n    update(newHTML, newCSS) {\n        if (!this.shadowRoot)\n            throw new Error(\"No shadow root\");\n        const html = newHTML || this.createHTML();\n        const css = newCSS || this.createCSS();\n        this.shadowRoot.innerHTML = this.createTemplate(html, css);\n        if (typeof this.hook === \"function\")\n            this.hook();\n    }\n    /**\n     * ## css\n     *\n     * Compiles a CSS declaration block from a `CSSConfig` object.\n     *\n     * ### Behaviour:\n     * - Converts camelCased keys into kebab-case (e.g. `flexDirection` → `flex-direction`).\n     * - Appends `px` to numeric values by default (e.g. `padding: 10` → `10px`).\n     * - Detects keys ending in `Percent` and treats their value as a percentage\n     *   (e.g. `widthPercent: 50` → `width: 50%`).\n     * - Supports array values for shorthand properties:\n     *   `padding: [8, 24]` → `padding: 8px 24px`.\n     * - Recognises boolean flags for common rules:\n     *   `border: true` injects a default border (e.g. `1px solid var(--border-color)`).\n     * - Accepts UK spellings for CSS properties ('colour', 'centre' etc).\n     * - Applies a `class` field to scope the rules to a selector (e.g. `.my-class { … }`).\n     *\n     * ### Parameters:\n     * - **config** (`CSSConfig`):\n     *   An object whose keys are CSS properties (or helper fields) and whose values\n     *   specify the rule. See example below for supported fields.\n     *\n     * ### Returns:\n     * `string` – A string of compiled CSS, with the selector and declarations ready\n     * to inject into a `<style>` block.\n     *\n     * ### Example:\n     * ```js\n     * const config = {\n     *   class:         \"container\",\n     *   display:       \"flex\",\n     *   flexDirection: \"column\",\n     *   widthPercent:  80,              // becomes \"width: 80%;\"\n     *   maxWidth:      600,             // becomes \"max-width: 600px;\"\n     *   padding:       [16, 32],        // becomes \"padding: 16px 32px;\"\n     *   colour:        \"white\",         // UK spelling\n     *   background:    \"black100\",\n     *   border:        \"border\",        // injects default border rule\n     *   borderRadius:  8,               // becomes \"border-radius: 8px;\"\n     *   opacity:       0.9,\n     *   pseudoClass:   \"hover\"          // creates :hover pseudoclass\n     *   media: {\n     *       breakpoint: 600,            // creates media query breakpoint\n     *       widthPercent: 100           // becomes \"width: 100%;\"\n     *   }\n     * };\n     *\n     * const cssText = this.css(config);\n     * ```\n     * This compiles into:\n     * ```css\n     * .container:hover {\n     *     display: flex;\n     *     flex-direction: column;\n     *     width: 80%; max-width: 600px;\n     *     padding: 16px 32px;\n     *     color: white;\n     *     background: var(--black100);\n     *     border: 1px solid var(--border-color);\n     *     border-radius: 8px; opacity: 0.9;\n     * }\n     *\n     * @media (max-width: 600px) {\n     *     .container {\n     *         width: 100%;\n     *     }\n     * }\n     * ```\n    *\n    */\n    css(css) { return this.design.create(css); }\n    /**\n     * ## request\n     *\n     * Performs an HTTP GET or POST and returns the parsed JSON body.\n     *\n     * ### Behaviour\n     * - Validates that `method` is `\"GET\"` or `\"POST\"`.\n     * - For POST, serialises `data` to JSON.\n     * - Throws on non-2xx responses or network errors.\n     *\n     * ### Type Parameters\n     * - `T` – the expected shape of the JSON response.\n     *\n     * ### Parameters\n     * - `url` (`string`): endpoint URL (absolute or relative).\n     * - `method` (`\"GET\" | \"POST\"`): HTTP verb.\n     * - `data?` (`object`): request payload for POST; ignored for GET.\n     *\n     * ### Returns\n     * `Promise<T>` – the deserialised JSON response.\n     *\n     * ### Example\n     * ```js\n     * async login() {\n     *   const creds = { user: \"alice\", pass: \"s3cret\" };\n     *   const resp = await this.request(\"/api/login\", \"POST\", creds);\n     *   console.log(\"JWT =\", resp.token);\n     * ```\n     * ```ts\n     *\n     * // Typescript\n     * async login() {\n     *   const creds = { user: \"alice\", pass: \"s3cret\" };\n     *   const resp = await this.request<{ token: string }>(\"/api/login\", \"POST\", creds);\n     *   console.log(\"JWT =\", resp.token);\n     * }\n     * ```\n     */\n    async request(url, method, data) {\n        return this.api.request(url, method, data);\n    }\n    /**\n     * ## submitForm\n     *\n     * Gathers form data (from a form element, `FormData` instance, or plain object)\n     * and sends it via `multipart/form-data` POST, returning parsed JSON.\n     *\n     * ### Behaviour\n     * - If passed an `HTMLFormElement`, calls `new FormData(form)` to capture all fields.\n     * - If passed a `FormData` instance, sends it directly.\n     * - If passed a plain object, converts each key/value pair into FormData entries.\n     * - Uses `fetch()` under the hood and throws on non-2xx responses or network errors.\n     *\n     * ### Type Parameters\n     * - `T` – the expected shape of the JSON response.\n     *\n     * ### Parameters\n     * - `url` (`string`): the endpoint URL to POST to.\n     * - `data` (`HTMLFormElement | FormData | Record<string, any>`):\n     *   - An `HTMLFormElement` to be serialised\n     *   - A `FormData` object\n     *   - A plain object which will be converted to `FormData`\n     *\n     * ### Returns\n     * `Promise<T>` – the parsed JSON response body.\n     *\n     * ### Examples\n     *\n     * // 1) Passing a form element\n     * ```ts\n     *\n     * const form = document.querySelector('form')!;\n     * const result = await this.submitForm<{ success: boolean }>(\n     *   \"/api/profile\",\n     *   form\n     * );\n     * ```\n     *\n     * // 2) Passing a FormData instance\n     * ```ts\n     *\n     * const fd = new FormData();\n     * fd.append(\"username\", \"jay\");\n     * const result = await this.submitForm<{ id: number }>(\n     *   \"/api/users\",\n     *   fd\n     * );\n     * ```\n     *\n     * // 3) Passing a plain object\n     * ```ts\n     *\n     * const data = { name: \"Alice\", age: 30, newsletter: true };\n     * const result = await this.submitForm<{ status: \"ok\" }>(\n     *   \"/api/subscribe\",\n     *   data\n     * );\n     * ```\n     */\n    async submitForm(url, data) {\n        let formData;\n        if (data instanceof HTMLFormElement)\n            formData = new FormData(data);\n        else if (data instanceof FormData)\n            formData = data;\n        else {\n            formData = new FormData();\n            for (const [k, v] of Object.entries(data)) {\n                formData.append(k, String(v));\n            }\n        }\n        return this.api.submitForm(url, formData);\n    }\n    /**\n     * Helper method that creates a template from component's HTML/CSS\n     */\n    createTemplate(html, css) {\n        return /* html */ `\n        ${html}\n        <style>\n        ${this.design.defaultComp()}\n        ${css}\n        </style>\n        `;\n    }\n}\nComp._registry = new Set();\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/comp.js?\n}");

/***/ }),

/***/ "./node_modules/jay-comp/dist/design.js":
/*!**********************************************!*\
  !*** ./node_modules/jay-comp/dist/design.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Design: () => (/* binding */ Design)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    design.ts\n * Author:      Josh Bassett\n * Date:        09/06/2025\n * Version:     1.4\n *\n * Licence:     Apache 2.0\n */\nclass Design {\n    /**\n     * Getter and Settter methods\n     */\n    set hostOverride(hostCSS) { this.hostOverride_ = hostCSS; }\n    get hostOverride() { return this.hostOverride_; }\n    /**\n     * API provides default values to be injected into every Comp when rendered.\n     */\n    defaultComp() {\n        return /* css */ `${this.resetStyles()}${this.hostOverride_ ? this.hostOverride_ : this.defaultHost()}${this.defaultFontStyle()}`;\n    }\n    /**\n     * Helper method provides standard reset values.\n     */\n    resetStyles() {\n        return `\n* {margin: 0; padding: 0;}`;\n    }\n    /**\n     * Helper method provides default :host config.\n     */\n    defaultHost() {\n        return `\n:host {display: block; width: 100%; box-sizing: border-box;}`;\n    }\n    /**\n     * Helper method provides default font styles modelled on Material Design 3 typography.\n     */\n    defaultFontStyle() {\n        return /* css */ `\nh1 {font-size: 57px; font-weight: 500; line-height: 64pt;}\nh2 {font-size: 45px; font-weight: 500; line-height: 52pt;}\nh3 {font-size: 36px; font-weight: 500; line-height: 44pt;}\nh4 {font-size: 32px; font-weight: 400; line-height: 40pt;}\nh5 {font-size: 28px; font-weight: 400; line-height: 36pt;}\nh6 {font-size: 24px; font-weight: 400; line-height: 32pt;}\np {font-size: 16px; font-weight: 400; line-height: 24pt;}\nlabel {font-size: 12px; font-weight: 500; line-height: 16pt;}`;\n    }\n    /**\n     * API abstracted through the Comp class, provides a method to build a CSS string.\n     *\n     * Method compiles base CSS and then appends media queries if applicable.\n     */\n    create(css) {\n        const selector = css.pseudoClass ?\n            `\\n${css.class}:${css.pseudoClass}` :\n            css.class;\n        let cssText = `\n${selector ? `.${selector}` : ':host'} {${this.compileCSS(css)}}\\n`;\n        if (css.media && typeof css.media === \"object\" && !Array.isArray(css.media)) {\n            cssText += this.compileMedia(css.media, css.class, css.pseudoClass);\n        }\n        return cssText;\n    }\n    /**\n     * Method compiles a CSS string from a provided CSS Config object.\n     *\n     * Works by appending a CSS string and running checks against both the key and value.\n     */\n    compileCSS(css) {\n        let cssString = \"\";\n        for (let key in css) {\n            if (key === \"class\" || key == \"pseudoClass\" || key == \"media\")\n                continue;\n            let cssValue = css[key];\n            cssValue = this.check(key, cssValue);\n            this.isPercent(key) ? key = this.convertPercent(key) : key;\n            key = this.camelToKebab(key);\n            cssString += `\n\\t${this.americanise(key)}: ${this.americanise(cssValue)};`;\n        }\n        return cssString;\n    }\n    compileMedia(media, parentClass, parentPseudo) {\n        let cssString = \"\";\n        const rawSize = media.breakpoint;\n        const breakpoint = typeof rawSize === \"number\" ? rawSize : parseInt(String(rawSize), 10);\n        if (isNaN(breakpoint)) {\n            console.warn(\"Media block missing a numeric size:\", media);\n            return \"\";\n        }\n        delete media.breakpoint;\n        const cls = media.class || parentClass;\n        const pseudo = media.pseudoClass || parentPseudo;\n        const selector = cls ? `.${cls}${pseudo ? `:${pseudo}` : \"\"}` : \":host\";\n        cssString += `\n@media (max-width: ${breakpoint}px) { \n\\t${selector} {${this.compileCSS(media)}}}\\n`;\n        return cssString;\n    }\n    /**\n     * Helper method checks CSSConfig values and returns valid CSS properies.\n     */\n    check(key, value) {\n        if (typeof value === 'number')\n            return this.checkInteger(key, value);\n        else if (Array.isArray(value))\n            return this.convertArrays(key, value);\n        else if (key === \"background\" || key === \"colour\" || key === \"border\")\n            return `var(--${value})`;\n        else\n            return value;\n    }\n    /**\n     * Helper method checks integers and returns valid CSS properties.\n     */\n    checkInteger(key, value) {\n        if (value === 0)\n            return 0;\n        if (this.isPercent(key))\n            return `${value}%`;\n        switch (key) {\n            case \"opacity\":\n            case \"fontWeight\": return value + \"pt\";\n            case \"top\":\n            case \"bottom\":\n            case \"left\":\n            case \"right\":\n            case \"lineHeight\":\n            case \"zIndex\":\n            case \"flexGrow\":\n            case \"flexShrink\":\n            case \"order\":\n            case \"aspectRatio\":\n                return value;\n        }\n        return `${value}px`;\n    }\n    /**\n     * Helper method converts camel case variables to kebab case.\n     */\n    camelToKebab(key) {\n        return key.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n    /**\n     * Helper method translates UK -> US CSS property names.\n     */\n    americanise(variable) {\n        const convert = {\n            \"colour\": \"color\",\n            \"centre\": \"center\",\n            \"grey\": \"gray\",\n            \"behaviour\": \"behavior\"\n        };\n        const textValue = String(variable);\n        return convert[textValue] || textValue;\n    }\n    /**\n     * Helper method converts arrays into CSS properties.\n     */\n    convertArrays(key, values) {\n        let cssStr = '';\n        for (let val in values)\n            typeof values[val] == \"number\" ?\n                cssStr += (this.checkInteger(key, values[val]) + \" \") :\n                cssStr += values[val] + \" \";\n        return cssStr;\n    }\n    /**\n     * Helper method checks if key is a percentage.\n     */\n    isPercent(key) {\n        return key.match(/Percent/) ? true : false;\n    }\n    /**\n     * Helper method converts a key to valid CSS property.\n     */\n    convertPercent(key) {\n        return key.replace(/Percent/g, '').toLowerCase();\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/design.js?\n}");

/***/ }),

/***/ "./node_modules/jay-comp/dist/effects.js":
/*!***********************************************!*\
  !*** ./node_modules/jay-comp/dist/effects.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Effects: () => (/* binding */ Effects)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett, whondo.com\n *\n * Filename:    effect.ts\n * Authors:     Sarit Samkumpim, Josh Bassett\n * Date:        11/06/2025\n * Version:     1.1\n *\n * Licence:     Apache 2.0\n */\n/**\n * # Effects\n *\n * Class provides a CSS animation library.\n *\n * ### Overview:\n * The class provides a set of common reusable effects to help you build interactive\n * Comps quickly.\n *\n * The `prop()` API is used to define an animation property, then add the effect name\n * as the argument to access it within the CSS.\n *\n * ### Methods:\n * - **prop()**: API for defining a property.\n * - **fadeIn()**: Fade in effect.\n * - **fadeOut()**: Fade out effect.\n * - **fadeLeft()**: Fade left effect.\n * - **fadeRight()**: Fade right effect.\n * - **slideUp()**: Slide up from the bottom effect.\n * - **slideDown()**: Slide down from the top effect.\n * - **scale()**: Scale effect.\n * - **pulse()**: Pulse effect.\n * - **fadeOutLeft()**: Fade out left effect.\n * - **fadeOutRight()**: Fade out right effect.\n *\n * ### Example:\n * ```js\n * createCSS() {\n *     const effect = this.effect.slideUp(25); // Translates Y 25px\n *     const prop   = this.effect.prop(\"slideUp\", .5); // Runs for half a second\n *     const css = this.design.create({\n *         // css omitted\n *         animation: prop\n *     });\n *     return `\n *     ${effect}\n *     `;\n * }\n * ```\n */\nclass Effects {\n    /**\n     * ## Prop\n     *\n     * Creates a CSS animation property.\n     *\n     * ### Behaviour:\n     * Method creates a CSS animation property from the input. Note: the name of the effect needs\n     * to be present to target the correct animation.\n     *\n     * ### Parameters:\n     * - **name** (`string`): Name of effect.\n     * - **duration** (`string`): Duration of effect.\n     * - **timing** (`string`): Timing of effect.\n     * - **delay** (`string`): Delay of effect.\n     * - **iterate** (`string`): Repetitions of effect.\n     * - **direction** (`string`): Direction of effect.\n     * - **fillMode** (`string`): Style for effect when it's not playing.\n     *\n     * ### Returns:\n     * `string` - Valid CSS animation property.\n     *\n     * ### Example:\n     * ```js\n     * effects.prop(\"slideUp\", .5, \"ease-in-out\", .2);\n     * effects.prop(\"scale\", 1);\n     * effects.prop(\"fadeIn\", .5);\n     * ```\n     */\n    prop(name, duration, timing = \"ease\", delay = \"0\", iterate = \"1\", direction = \"normal\", fillMode = \"none\") {\n        return `${name} ${duration}s ${timing} ${delay}s ${iterate} ${direction} ${fillMode};`;\n    }\n    /**\n     * ## Fade In\n     *\n     * Provides an effect for fading in an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that gradually increase the opacity from 0 to 1.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-in effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeInCSS = effects.fadeIn();\n     * ```\n     */\n    fadeIn() {\n        return /* css */ `\n      @keyframes fadeIn {\n        0% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out\n     *\n     * Provides an effect for fading out an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's opacity from 1 to 0.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-out effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutCSS = effects.fadeOut();\n     * ```\n     */\n    fadeOut() {\n        return /* css */ `\n      @keyframes fadeOut {\n        0% {\n          opacity: 1;\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Left\n     *\n     * Provides an effect for fading in an element from the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels to translate the element from the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeLeftCSS = effects.fadeLeft(20);\n     * ```\n     */\n    fadeLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeLeft {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Right\n     *\n     * Provides an effect for fading in an element from the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels by which the element is translated to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeRightCSS = effects.fadeRight(20);\n     * ```\n     */\n    fadeRight(translateX) {\n        return /* css */ `\n      @keyframes fadeRight {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Up\n     *\n     * Provides an effect for sliding an element up into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated downward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset downward.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-up effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideUpCSS = effects.slideUp(20);\n     * ```\n     */\n    slideUp(translateY) {\n        return /* css */ `\n      @keyframes slideUp {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Down\n     *\n     * Provides an effect for sliding an element down into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated upward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-down effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideDownCSS = effects.slideDown(20);\n     * ```\n     */\n    slideDown(translateY) {\n        return /* css */ `\n      @keyframes slideDown {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Scale\n     *\n     * Provides an effect for scaling an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's scale from an initial value to a target value,\n     * while also transitioning from transparent to fully opaque.\n     *\n     * ### Parameters:\n     * - **scaleFrom** (`number`): The initial scale factor.\n     * - **scaleTo** (`number`): The target scale factor.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a scaling effect.\n     *\n     * ### Example:\n     * ```js\n     * const scaleCSS = effects.scale(0.8, 1);\n     * ```\n     */\n    scale(scaleFrom, scaleTo) {\n        return /* css */ `\n      @keyframes scaleIn {\n        0% {\n          opacity: 0;\n          transform: scale(${scaleFrom});\n        }\n        100% {\n          opacity: 1;\n          transform: scale(${scaleTo});\n        }\n      }\n    `;\n    }\n    /**\n     * ## Pulse\n     *\n     * Provides a pulsing effect for an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that scale an element up slightly and then return it to its original size,\n     * creating a subtle pulsating appearance.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a pulsing effect.\n     *\n     * ### Example:\n     * ```js\n     * const pulseCSS = effects.pulse();\n     * ```\n     */\n    pulse() {\n        return /* css */ `\n      @keyframes pulsing {\n        0% {\n          transform: scale(1);\n        }\n        50% {\n          transform: scale(1.05);\n        }\n        100% {\n          transform: scale(1);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Right\n     *\n     * Provides an effect for fading out an element to the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the right.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutRightCSS = effects.fadeOutRight(20);\n     * ```\n     */\n    fadeOutRight(translateX) {\n        return /* css */ `\n      @keyframes fadeOutRight {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Left\n     *\n     * Provides an effect for fading out an element to the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the left.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutLeftCSS = effects.fadeOutLeft(20);\n     * ```\n     */\n    fadeOutLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeOutLeft {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/effects.js?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/static/jay-comps/imports.js");
/******/ 	
/******/ })()
;