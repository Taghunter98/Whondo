/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/static/jay-comps/comp-pages/create.js":
/*!***************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/create.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\n\nclass CreatePage extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n    \n    constructor() {\n\n        super();\n\n\n\n        this.name_ = \"Verify Page\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n    \n        this.render();\n    \n    }\n\n    createHTML() {\n\n        return /* html */`\n        <div class=\"background\">\n            <div class=\"container\">\n                <dialog-box id=\"describe\"></dialog-box>\n            </div>\n        </div>\n        `;\n    \n    }\n\n    createCSS() {\n\n        const effect = this.effect.slideUp(20);\n        const prop   = this.effect.prop(\"slideUp\", .5);\n\n        const background = this.design.create({\n            class: \"background\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            height: \"100vh\",\n            justifyContent: \"centre\",\n            alignItems: \"centre\",\n            background: \"black10\",\n            overflow: \"hidden\",\n        });\n\n        const container = this.design.create({\n            class: \"container\",\n            background: \"white\",\n            animation: prop, \n            width: \"auto\",        \n        });\n\n        return /* css */ `\n       ${effect}\n       ${background}\n       ${container}\n        \n        `;\n    \n    }\n\n    hook(){\n\n        const dialogBox = this.shadowRoot.querySelector(\"#describe\");\n\n        dialogBox.title      = \"Email Verification\";\n        dialogBox.paragraph1 = \"We have sent an email to <b>{{email}}</b> with a verification link.\";\n        dialogBox.paragraph2 = \"If you do not receive an email, please check your spam.\";\n        dialogBox.svgIcon    = ` xmlns=\"http://www.w3.org/2000/svg\" height=\"64px\" viewBox=\"0 -960 960 960\" width=\"64px\" fill=\"currentColor\"><path d=\"m734-164-42-42 73-74H584v-60h181l-73-74 42-42 146 146-146 146ZM140-280q-24.75 0-42.37-17.63Q80-315.25 80-340v-440q0-24.75 17.63-42.38Q115.25-840 140-840h560q24.75 0 42.38 17.62Q760-804.75 760-780v232q-7.5-1-15-1.5t-15-.5q-8 0-15 .5t-15 1.5v-185L416-532 140-732v392h351q-1 8-1 13.5v13.75q0 8.25.5 16.5T493-280H140Zm36-500 240 174 246-174H176Zm-36 440v-440 440Z\"/`;   \n    \n    }\n\n}\n\ncustomElements.define('comp-create', VerifyPage);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/create.js?");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/login.js":
/*!**************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/login.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\n\nclass LoginPageComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n\n    constructor() {\n\n        super();\n        \n        this.title_ = \"Login to Whondo\";\n\n        this.name_ = \"Login Page\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n    \n        this.render();\n    \n    }\n\n    createHTML() {\n    \n        return /* html */ `\n        <div class=\"background\">\n            <div class=\"container\">\n                <h3>${this.title_}</h3>\n\n                <comp-input id=\"email\" name=\"email\"></comp-input>\n                <comp-input id=\"password\" name=\"password\"></comp-input>\n\n                <comp-button id=\"submit\">Refresh Card</comp-button>\n                <p id=\"result\"></p>\n            </div>\n            \n        </div>\n        `;\n    \n    }\n\n    createCSS() {\n\n        const animation = this.effect.prop(\"slideUp\", .5);\n\n        const background = this.design.create({\n            class: \"background\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            padding: \"50px 0px\",\n            alignItems: \"centre\",\n            border: false,\n            gap: 0,\n            background: \"black10\",\n        });\n\n        const backgroundMobile = this.design.create({\n            class: \"background\",\n            padding: 20,\n            width: \"auto\"\n        });\n\n        const container = this.design.create({\n            class: \"container\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"auto\",\n            maxWidth: 500,\n            padding: 20,\n            alignItems: \"start\",\n            border: \"border\",\n            borderRadius: 16,\n            gap: 15,\n            background: \"white\",\n            animation: animation\n        });\n    \n        return /* css */ `\n        \n        ${background}\n        \n        ${container}\n        \n        @media (max-width: 600px) {\n            ${backgroundMobile}\n        }\n        `;\n    \n    }\n\n    openWindow() {\n\n        window.location.assign(\"/register\");\n    \n    }\n\n    async login(result, json) {\n\n        let data = await this.api.request(\"/login\", \"POST\", json);\n        \n        (data.status) ? result.innerHTML = data.message : result.innerHTML = data.error;\n    \n    }\n\n    hook() {\n\n        const compButton = this.shadowRoot.getElementById(\"submit\");\n        const result     = this.shadowRoot.getElementById(\"result\");\n        const email      = this.shadowRoot.getElementById(\"email\");\n        const pass       = this.shadowRoot.getElementById(\"password\");\n        \n        compButton.buttonText = \"Login\";\n        email.inputLabel      = \"Email\";\n        email.inputPrompt     = \"Enter email\";\n        pass.inputLabel       = \"Password\";\n        pass.inputType        = \"password\";\n        pass.inputPrompt      = \"Enter password\";\n\n        compButton.addEventListener(\"click\", () => {\n\n            const jsonData = {email : email.inputValue, password : pass.inputValue};\n\n            this.login(result, jsonData);\n        \n        });\n    \n    }\n  \n}\n\ncustomElements.define(\"comp-login\", LoginPageComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/login.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/button.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/button.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\n * Copyright (c) 2025 Josh Bassett, whondo.com\n * \n * Filename:    button.js\n * Author:      Josh Bassett\n * Date:        10/06/2025\n * Version:     1.0\n * \n * Description: Class that creates a reusable Button Comp.\n */\n\n\n\nclass ButtonComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n\n    constructor() {\n\n        super();                                                    \n\n        this.buttonText_    = \"This is a button\";\n        this.buttonVarient_ = 1;    \n        \n        this.name_ = \"Button\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n\n        this.render();\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's button text.\n     * \n     * @param {string} newButtonText\n     */\n    set buttonText(newButtonText) {\n\n        this.buttonText_ = newButtonText;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's button varient (1, 2, 3).\n     * \n     * @param {string} newButtonVarient\n     */\n    set buttonVarient(newButtonVarient) {\n\n        this.buttonVarient_ = newButtonVarient;\n        this.update(this.html_, this.createCSS());\n    \n    }\n    \n    /**\n     * @brief A getter method that returns the Comp's button text.\n     * \n     * @returns {string} Comp's button text. \n     */\n    get buttonText() {\n\n        return this.buttonText_;\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's button varient.\n     * \n     * @returns {number} Comp's button varient. \n     */\n    get buttonVarient() {\n\n        return this.buttonVarient_;\n    \n    }\n    \n    createHTML() {\n\n        return /* html */ `<button id=\"button\" class=\"button\">${this.buttonText_}</button>`;\n    \n    }\n\n    createCSS() {\n\n        let button, buttonHover, buttonActive;\n\n        const primary = this.design.create({\n            class: \"button\",\n            colour: \"white\",\n            background: \"black100\",\n            padding: \"9px 16px\",\n            border: \"border\",\n            borderRadius: 8,\n            cursor: \"pointer\",\n            transition: \"background 0.1s ease-in-out\"\n        });\n\n        const primaryHover = this.design.create({\n            class: \"button\",\n            psuedoClass: \"hover\",\n            background: \"black80\",\n        });\n\n        const primaryActive = this.design.create({\n            class: \"button\",\n            psuedoClass: \"active\",\n            background: \"black60\"\n        });\n\n        const secondary = this.design.create({\n            class: \"button\",\n            colour: \"black100\",\n            background: \"black10\",\n            padding: \"9px 16px\",\n            borderRadius: 8,\n            cursor: \"pointer\",\n            transition: \"background 0.1s ease-in-out\"\n        });\n\n        const secondaryHover = this.design.create({\n            class: \"button\",\n            psuedoClass: \"hover\",\n            background: \"black20\"\n        });\n\n        const secondaryActive = this.design.create({\n            class: \"button\",\n            psuedoClass: \"active\",\n            background: \"black40\"\n        });\n\n        let tertiary;\n        \n        if (this.buttonVarient_ == 1) {\n\n            button       = primary;\n            buttonHover  = primaryHover;\n            buttonActive = primaryActive;\n        \n        }\n        else if (this.buttonVarient_ == 2) {\n\n            button       = secondary;\n            buttonHover  = secondaryHover;\n            buttonActive = secondaryActive;\n        \n        }\n        else if (this.buttonVarient_ == 3) button = tertiary;\n\n        return `\n        ${button}\n        ${buttonHover}\n        ${buttonActive}\n        `;\n    \n    }\n\n}\n\ncustomElements.define(\"comp-button\", ButtonComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/button.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/card.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/card.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\n * Copyright (c) 2025 Josh Bassett, whondo.com\n * \n * Filename:    card.js\n * Author:      Josh Bassett\n * Date:        10/06/2025\n * Version:     1.0\n * \n * Description: Class that creates a reusable Card Comp.\n */\n\n\n\nclass CardComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n\n    constructor() {\n\n        super();\n\n        this.cardTitle_    = \"Card header\";\n        this.cardText_     = \"Card text goes here.\";\n        this.buttonText_   = \"Card Action\";\n        this.buttonAction_ = this.debug;\n        this.cardImage_    = \"\";\n\n        this.name_ = \"Card\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n\n        this.render();\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's title.\n     * \n     * @param {string} newCardTitle\n     */\n    set cardTitle(newCardTitle) {\n       \n        this.cardTitle_ = newCardTitle;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's text.\n     * \n     * @param {string} newCompText\n     */\n    set cardText(newCompText) {\n\n        this.cardText_ = newCompText;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's button text.\n     * \n     * @param {string} newButtonText\n     */\n    set buttonText(newButtonText) {\n\n        this.buttonText_ = newButtonText;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's button link.\n     * \n     * @param {string} newButtonAction\n     */\n    set buttonAction(newButtonAction) {\n\n        this.buttonAction_ = newButtonAction;\n        this.update(this.html_, this.css_);\n    \n    }\n\n    /**\n     * @brief A setter method that sets the Comp's image link.\n     * \n     * @param {string} newCardImage\n     */\n    set cardImage(newCardImage) {\n\n        this.cardImage_ = newCardImage;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's title.\n     * \n     * @returns {string} Comp's title. \n     */\n    get cardTitle() {\n\n        return this.cardTitle_;\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's text.\n     * \n     * @returns {string} Comp's text. \n     */\n    get cardText() {\n\n        return this.cardText_;\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's button text.\n     * \n     * @returns {string} Comp's button text. \n     */\n    get buttonText() {\n\n        return this.buttonText_;\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's button link.\n     * \n     * @returns {string} Comp's button link. \n     */\n    get buttonAction() {\n        \n        return this.buttonAction_;\n    \n    }\n\n    /**\n     * @brief A getter method that returns the Comp's card image.\n     * \n     * @returns {string} Comp's card image. \n     */\n    get cardImage() {\n\n        return this.cardImage_;\n    \n    }\n    \n    /**\n     * @brief A method that builds the card's HTML.\n     * \n     * @returns {literal} HTML to be injected into Comp. \n     */\n    createHTML() {\n\n        let imageHTML = '';\n\n        if (this.cardImage_) imageHTML = /* html */`<img src=\"${this.cardImage_}\">`;\n\n        return /* html */ `\n        <div class=\"cardContainer\">\n            ${imageHTML}\n            <div class=\"textContainer\">\n                <h2>${this.cardTitle_}</h2>\n                <p>${this.cardText_}</p>\n            </div>\n            <comp-button id=\"button\"></comp-button>\n        </div>\n        `;\n    \n    }\n\n    /**\n     * @brief A method that builds the card's CSS.\n     * \n     * @returns {literal} CSS to be injected into Comp.\n     */\n    createCSS() {\n        \n        const cardStyle = this.design.create({\n            valueID: \"cardContainer\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            boxSizing: \"border-box\",\n            width: \"100%\", \n            maxWidth: 500, \n            padding: 20,\n            alignItems: \"start\",\n            border: true,\n            borderRadius: 15,\n            gap: 20,\n            background: \"white\"\n        });\n\n        const textCardStyle = this.design.create({\n            valueID: \"textContainer\",\n            direction: \"column\", \n            width: \"100%\",\n            maxWidth: 500, \n            padding: 0, \n            alignItems: \"start\", \n            border: false\n        });\n\n        return `\n        ${cardStyle}\n        ${textCardStyle}\n        `;\n    \n    }\n\n    /**\n     * @brief A method that opens a new page, with Safari support.\n     * \n     * @param {any} event \n     */\n    onButtonClick(event) {\n\n        event.preventDefault();\n \n        this.buttonAction_();\n    \n    }\n\n    /**\n     * @brief A method that runs a build hook when the Component is rendered it\n     *        provides the inner JavaScript logic for the Comp. \n     */\n    hook() {\n\n        const cardButton         = this.shadowRoot.getElementById(\"button\");\n        cardButton.buttonVarient = 2;\n\n        cardButton.addEventListener(\"click\", this.onButtonClick.bind(this));\n    \n    }\n\n}\n\ncustomElements.define(\"comp-card\", CardComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/card.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/dialog.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/dialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\n\nclass DialogComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n\n    constructor() {\n\n        super();\n        \n        this.title_      = \"Hello World\";\n        this.paragraph1_ = \"this is a paragraph\";\n        this.paragraph2_ = \"this is another paragraph\";\n        this.svgIcon_    = \"\";\n\n        this.name_ = \"Dialog\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n\n        this.render();    \n    \n    }\n\n    set title(newTitle){\n\n        this.title_ = newTitle;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n\n    set paragraph1(value){\n\n        this.paragraph1_ = value;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    set paragraph2(value){\n\n        this.paragraph2_ = value;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    set svgIcon(value){\n\n        this.svgIcon_ = value;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    get paragraph1() {\n\n        return this.paragraph1_;\n    \n    }\n\n    get paragraph2() {\n\n        return this.paragraph2_;\n    \n    }\n\n    get title() {\n\n        return this.title_;\n    \n    }\n\n\n    get svgIcon() {\n\n        return this.svgIcon_;\n    \n    }\n\n    createHTML() {\n\n        return /* html */ `\n            <div class=\"background\">\n\n                <div class=\"container\">\n\n                    <!--svg logo go here-->\n                    <svg class=\"icon\" ${this.svgIcon_}></svg>\n                    <h3 class=\"head\">${this.title_}</h3>\n                    <p class=\"dialog\">${this.paragraph1_}<br>${this.paragraph2_}</p>\n\n                </div>\n\n            </div>\n        `;\n    \n    }\n\n    createCSS() {\n\n        const background = this.design.create({\n            class: \"background\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            height: \"100vh\",\n            alignItems: \"centre\",\n            border: false,\n            gap: 0,\n            background: \"black10\",\n            justifyContent: \"centre\"\n        });\n\n        const backgroundMobile = this.design.create({\n            class: \"background\",\n            padding: 20,\n            width: \"auto\",\n        });\n\n        const container = this.design.create({\n            class: \"container\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"auto\",\n            maxWidth: 500,\n            padding: 20,\n            alignItems: \"centre\",\n            border: \"border\",\n            borderRadius: 16,\n            gap: 10,\n            background: \"white\",\n            textAlign: \"start\",\n            marginTop: 0,\n        });\n\n        const head = this.design.create({\n            class: \"head\",\n            fontSize: 24,\n            alignSelf: \"center\",\n            lineHeight: 30,\n        });\n\n        const dialog = this.design.create({\n            class: \"dialog\",\n            fontSize: 16,\n            textAlign: \"start\",\n        });\n\n        const icon = this.design.create({\n            class: \"icon\",\n            colour: \"green60\",\n        });\n\n        return /* css */ `\n            ${background}\n            ${container}\n            ${icon}\n            ${head}\n            ${dialog}\n\n            @media (max-width: 600px){\n                ${backgroundMobile}\n            }\n\n        `;\n    \n    }\n\n\n\n}\n\ncustomElements.define(\"dialog-box\", DialogComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/dialog.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/input.js":
/*!*********************************************!*\
  !*** ./app/static/jay-comps/comps/input.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\n\nclass InputComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\n\n    constructor() {\n\n        super();\n        \n        this.inputLabel_  = \"Label\";\n        this.inputType_   = \"text\";\n        this.inputPrompt_ = \"Enter text\";\n\n        this.name_ = \"Input\";\n        this.html_ = this.createHTML();\n        this.css_  = this.createCSS();\n\n        this.render();\n    \n    }\n\n    set inputLabel(newInputLabel) {\n\n        this.inputLabel_ = newInputLabel;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    set inputType(newInputType) {\n\n        this.inputType_ = newInputType;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    set inputPrompt(newInputPrompt) {\n\n        this.inputPrompt_ = newInputPrompt;\n        this.update(this.createHTML(), this.css_);\n    \n    }\n\n    get inputLabel() {\n\n        return this.inputLabel_;\n    \n    }\n\n    get inputType() {\n\n        return this.inputType_;\n    \n    }\n\n    get inputPrompt() {\n\n        return this.inputPrompt_;\n    \n    }\n\n    get inputValue() {\n\n        return this.shadowRoot.querySelector(\"input\").value;\n\n    }\n\n\n    createHTML() {\n\n        return /* html */ `\n        <div class=\"inputContainer\">\n            <label>${this.inputLabel_}</label>\n            <input class=\"inputValue\" type=\"${this.inputType_}\" placeholder=\"${this.inputPrompt_}\">\n        </div>\n        `;\n    \n    }\n\n    createCSS() {\n\n        const inputContainer = this.design.create({\n            class: \"inputContainer\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\",\n            maxWidth: \"none\",\n            padding: 0,\n            alignItems: \"start\",\n            gap: 10,\n            background: \"--white\"\n        });\n\n        const input = this.design.create({\n            class: \"inputValue\",\n            display: \"block\",\n            fontSize: 12,\n            width: \"100%\",\n            padding: \"8px 12px\",\n            border: \"border\",\n            borderRadius: 8,\n            boxSizing: \"border-box\"\n        });\n\n        const inputHover = this.design.create({\n            class: \"inputValue\",\n            psuedoClass: \"hover\",\n            outline: \"solid 2px var(--black60)\"\n        });\n\n        const inputActive = this.design.create({\n            class: \"inputValue\",\n            psuedoClass: \"focus\",\n            outline: \"solid 2px var(--black100)\"\n        });\n\n        return /* css */ `\n        \n        ${inputContainer}\n        \n        ${input}\n        ${inputHover}\n        ${inputActive}\n        `;\n    \n    }\n\n}\n\ncustomElements.define(\"comp-input\", InputComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/input.js?");

/***/ }),

/***/ "./app/static/jay-comps/imports.js":
/*!*****************************************!*\
  !*** ./app/static/jay-comps/imports.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/* harmony import */ var _comps_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comps/button.js */ \"./app/static/jay-comps/comps/button.js\");\n/* harmony import */ var _comps_card_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./comps/card.js */ \"./app/static/jay-comps/comps/card.js\");\n/* harmony import */ var _comps_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comps/input.js */ \"./app/static/jay-comps/comps/input.js\");\n/* harmony import */ var _comps_dialog_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comps/dialog.js */ \"./app/static/jay-comps/comps/dialog.js\");\n/* harmony import */ var _comp_pages_login_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comp-pages/login.js */ \"./app/static/jay-comps/comp-pages/login.js\");\n/* harmony import */ var _comp_pages_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./comp-pages/create.js */ \"./app/static/jay-comps/comp-pages/create.js\");\n\n// Comp src file\n\n\n// Comps\n\n\n\n\n\n// Pages\n\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/imports.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/api.js":
/*!*******************************************!*\
  !*** ./node_modules/jay-comp/dist/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API: () => (/* binding */ API)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    api.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.0\n *\n * Licence:     Apache 2.0\n */\n/**\n * # API\n *\n * Class for HTTP requests.\n *\n * ### Overview:\n * Provides a method `request` to abstract from JavaScript's `fetch` API.\n *\n * ### Methods:\n * - **request()**: Makes a GET or POST HTTP request.\n */\nclass API {\n    /**\n     * ## Request\n     *\n     * Performs a GET or POST HTTP request.\n     *\n     * ### Behaviour:\n     * Method performs an HTTP request, validates the input, handles any errors, and returns\n     * a valid JSON response.\n     *\n     * To use this method, you need to contain it within an `async` function in order to read\n     * the Promise that is returned.\n     *\n     * ### Parameters:\n     * - **url** (`string`): The URL of the REST API endpoint.\n     * - **method** (`string`): The request method, `POST` or `GET`.\n     * - **data** (`Object`): The JSON data as a JavaScript object.\n     *\n     * ### Returns:\n     * `Promise` - The request data.\n     *\n     * ### Example:\n     * ```js\n     * async post(result, json) {\n     *     let data = await this.api.request(\"/login\", \"POST\", json);\n     *     (data.status) ? result.innerHTML = data.message : result.innerHTML = data.error;\n     * }\n     * ```\n     * ```js\n     * async get() {\n     *     const data = await this.api.request(\"/fact\", \"GET\");\n     *     console.log(data.fact);\n     * }\n     * ```\n     */\n    async request(url, method, data) {\n        if (method !== \"POST\" && method !== \"GET\") {\n            throw new Error(\"Unsupported or invalid method type\");\n        }\n        const options = {\n            method: method,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        if (method === \"POST\")\n            options.body = JSON.stringify(data);\n        try {\n            const response = await fetch(url, options);\n            if (!response.ok)\n                throw new Error(`HTTP ERROR: Status: ${response.status}`);\n            return await response.json();\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/api.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/comp.js":
/*!********************************************!*\
  !*** ./node_modules/jay-comp/dist/comp.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comp: () => (/* binding */ Comp)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"./node_modules/jay-comp/dist/api.js\");\n/* harmony import */ var _design_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./design.js */ \"./node_modules/jay-comp/dist/design.js\");\n/* harmony import */ var _effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./effects.js */ \"./node_modules/jay-comp/dist/effects.js\");\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    comp.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.2\n *\n * Licence:     Apache 2.0\n */\n\n\n\n/**\n * # Comp\n *\n * Abstract base class for Comps that handles core logic.\n *\n * ### Overview:\n * This class serves as the foundation for every component (Comp). Derived classes must override:\n * - **createHTML()**: Provides the component's HTML structure.\n * - **createCSS()**: Defines the component-specific styles.\n * - **hook()**: Implements JavaScript logic within the component.\n *\n * ### Properties:\n * - **name** (`string`): The name of the component.\n * - **html** (`string`): The HTML structure of the component.\n * - **css** (`string`): The CSS rules applied to the component.\n * - **design** (`Design`): A reference to the Design class for styling.\n * - **api** (`API`): A reference to the API handler for data management.\n * - **effect** (`Effects`): A reference to the Effects class for animations.\n *\n * ### Methods:\n * - **render()**: Updates the component's Shadow DOM.\n * - **update(newHTML, newCSS)**: Updates the component’s content and re-renders.\n * - **debug()**: Logs the component's data for debugging purposes.\n *\n * ### Example:\n * ```js\n *\n * class MyComp extends Comp {\n *\n *     constructor() {\n *\n *         super();\n *\n *         this.hello_ = \"Hello World!\";\n *\n *         this.name_ = \"Comp\";\n *         this.html_ = createHTML();\n *         this.css_  = createCSS();\n *\n *         this.render();\n *\n *     }\n *\n *     createHTML() {\n *\n *         return `<button class=\"hello\">${this.hello_}</button>`;\n *\n *     }\n *\n *     createCSS() {\n *\n *         const style = this.design.create({\n *             class: \"hello\",\n *             background: \"black100\",\n *             colour: \"white\",\n *             padding: 10,\n *             borderRadius: 8\n *         });\n *\n *         return `${style}`;\n *     }\n *\n *     hook() {\n *\n *         this.shadowRoot\n *             .querySelector('button')\n *             .addEventListener(\"click\", () => {\n *                 console.log(this.hello_);\n *         });\n *\n *     }\n *\n * }\n * ```\n */\nclass Comp extends HTMLElement {\n    constructor() {\n        super();\n        this.name_ = \"Component Name\";\n        this.html_ = \"\";\n        this.css_ = \"\";\n        this.design = new _design_js__WEBPACK_IMPORTED_MODULE_1__.Design();\n        this.api = new _api_js__WEBPACK_IMPORTED_MODULE_0__.API();\n        this.effect = new _effects_js__WEBPACK_IMPORTED_MODULE_2__.Effects();\n        this.attachShadow({ mode: \"open\" });\n    }\n    // Getter and setter for Comp name\n    set name(newCompName) {\n        this.name_ = newCompName;\n    }\n    get name() {\n        return this.name_;\n    }\n    // Getter and setter for Comp HTML\n    set html(newCompHTML) {\n        this.html_ = newCompHTML;\n    }\n    get html() {\n        return this.html_;\n    }\n    // Getter and setter for Comp CSS\n    set css(newCompCSS) {\n        this.css_ = newCompCSS;\n    }\n    get css() {\n        return this.css_;\n    }\n    /**\n     * ## Create Template\n     *\n     * Builds an HTML Element template string.\n     *\n     * ### Behaviour:\n     * The method takes two string arguments with the HTML and CSS data that is\n     * injected into a template string.\n     *\n     * ### Parameters:\n     * - **html** (`string`): The HTML to be rendered.\n     * - **css** (`string`): The CSS to be rendered.\n     *\n     * ### Returns:\n     * `string` - Template string to be injected.\n     */\n    createTemplate(html, css) {\n        return /* html */ `\n      ${html}\n      <style>\n        ${this.design.defaultComp()}\n        ${css}\n      </style>\n    `;\n    }\n    /**\n     * ## Debug\n     *\n     * Prints debug information to the console.\n     *\n     * ### Behaviour:\n     * The method prints out the Comp `name`, `html_` and `css_` attributes to the console for\n     * debugging.\n     *\n     * ### Example:\n     * ```js\n     *\n     * this.debug()\n     * ```\n     */\n    debug() {\n        console.log(\"DEBUG COMP: \" + this.name);\n        console.log(this.name);\n        console.log(this.html);\n        console.log(this.css);\n    }\n    /**\n     * ## Render\n     *\n     * Renders the Comp to the screen.\n     *\n     * ### Behaviour:\n     * Method renders the Comp by setting the Shadow DOM's innerHTML to the generated template.\n     *\n     * If a hook (an internal build method) is defined, it will be invoked afterwards.\n     *\n     * ### Example:\n     * ```js\n     *\n     * constructor() {\n     *\n     *     this.name_ = \"Comp\";\n     *     this.html_ = this.createHTML();\n     *     this.css_  = this.createCSS();\n     *\n     *     this.render();\n     * }\n     * ```\n     */\n    render() {\n        if (!this.shadowRoot) {\n            throw new Error(\"Shadow root is not available.\");\n        }\n        this.shadowRoot.innerHTML = this.createTemplate(this.html_, this.css_);\n        if (typeof this.hook === \"function\") {\n            this.hook();\n        }\n    }\n    /**\n     * # Update\n     *\n     * Updates the Comp with new HTML/CSS.\n     *\n     * ### Behaviour:\n     * Method updates the Comp's internal HTML/CSS with new values.\n     *\n     * Then renders the Comp with the new template.\n     *\n     * ### Parameters:\n     * - **newHTML** (`string`): The new HTML to be injected.\n     * - **newCSS** (`string`): The new CSS to be injected.\n     *\n     * ### Example:\n     * ```js\n     *\n     * set buttonText(newButtonText) {\n     *\n     *     this.buttonText_ = newButtonText;\n     *     this.update(this.createHTML(), this.css_);\n     * }\n     * ```\n     */\n    update(newHTML, newCSS) {\n        this.html_ = newHTML;\n        this.css_ = newCSS;\n        this.render();\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/comp.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/design.js":
/*!**********************************************!*\
  !*** ./node_modules/jay-comp/dist/design.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Design: () => (/* binding */ Design)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    design.ts\n * Author:      Josh Bassett\n * Date:        09/06/2025\n * Version:     1.3\n *\n * Licence:     Apache 2.0\n */\n/**\n * # Design\n *\n * Class that compiles JavaScript → CSS.\n *\n * ### Overview:\n * This class serves as the compiler for converting JavaScript into valid CSS.\n *\n * This is achieved through the `compileCSS()` method and the `create()` API for the\n * developer to write their CSS, but with the luxury of JavaScript Record notation.\n *\n * ### Methods:\n * - **create()**: Public API for the developer to write CSS.\n * - **compileCSS()**: Compiler for CSS.\n * - **parseVariables()**: Converts camel case variables to kebab case.\n * - **check()**: Returns px value.\n * - **americanise()**: Converts British to American property names.\n *\n * ### Example:\n * ```js\n * const instance = new [ClassName]();\n * instance.[methodName]([argument]);\n * ```\n */\nclass Design {\n    /**\n     * ## Default Comp\n     *\n     * Injects basic Comp CSS.\n     *\n     * ### Behaviour:\n     * Method injects values:\n     * - `root` values to ensure shadow DOM elements inherit correctly.\n     * - Typography styles modelled on Material Design for accessibility.\n     *\n     * ### Returns:\n     * `string` - Default CSS to be injected.\n     */\n    defaultComp() {\n        return /* css */ `\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        :host {\n            display: block;\n            width: 100%;\n            box-sizing: border-box;\n        }\n        h1 {\n            font-size: 57px;\n            font-weight: 500;\n            line-height: 64pt;\n        }\n        h2 {\n            font-size: 45px;\n            font-weight: 500;\n            line-height: 52pt;\n        }\n        h3 {\n            font-size: 36px;\n            font-weight: 500;\n            line-height: 44pt;\n        }\n        h4 {\n            font-size: 32px;\n            font-weight: 400;\n            line-height: 40pt;\n        }\n        h5 {\n            font-size: 28px;\n            font-weight: 400;\n            line-height: 36pt;\n        }\n        h6 {\n            font-size: 24px;\n            font-weight: 400;\n            line-height: 32pt;\n        }\n        p {\n            font-size: 16px;\n            font-weight: 400;\n            line-height: 24pt;\n        }\n        label {\n            font-size: 12px;\n            font-weight: 500;\n            line-height: 16pt;\n        }\n        `;\n    }\n    /**\n     * ## Create\n     *\n     * Generates a CSS string from a configuration object.\n     *\n     * ### Behaviour:\n     * This method transforms a JavaScript object (with keys in camelCase)\n     * into a CSS string, converting keys to kebab-case and ensuring the proper\n     * conversion of British to American English for property names. Global CSS\n     * variables may be referenced as <code>var(--example)</code>, and all colour\n     * properties must be defined as CSS variables.\n     *\n     * ### Parameters:\n     * - **css** (`CSSConfig`): A configuration object representing CSS properties and values.\n     *\n     * ### Returns:\n     * `string` - The compiled CSS code.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const cssConfig = this.create({\n     *   class: \"container\",\n     *   pseudoClass: \"hover\",\n     *   display: \"flex\",\n     *   flexDirection: \"column\",\n     *   boxSizing: \"border-box\",\n     *   width: \"100%\",\n     *   maxWidth: 500,\n     *   padding: 20,\n     *   alignItems: \"center\",\n     *   border: true,\n     *   borderRadius: 10,\n     *   background: \"white\",\n     *   colour: \"black100\",\n     *   fontSize: 16,\n     *   fontWeight: 400,\n     *   opacity: 1\n     * });\n     * ```\n     */\n    create(css) {\n        let cssSelector = (css.psuedoClass) ? `${css.class}:${css.psuedoClass}` : css.class;\n        return /* css */ `\n        .${cssSelector} {\n            ${this.compileCSS(css)}\n        }\n        `;\n    }\n    /**\n     * ## Compile CSS\n     *\n     * Compiles a CSS configuration object into a valid CSS string.\n     *\n     * ### Behaviour:\n     * This method iterates over a CSS configuration object, performing necessary\n     * transformations such as:\n     *\n     * - Converting camelCase keys to kebab-case.\n     * - Converting British English property names to American English.\n     * - Appending appropriate units (e.g. px, pt) to numerical values.\n     *\n     * ### Parameters:\n     * - **css** (`CSSConfig`): A configuration object representing CSS properties and values.\n     *\n     * ### Returns:\n     * `string` - The compiled CSS code.\n     */\n    compileCSS(css) {\n        let cssString = \"\";\n        for (let key in css) {\n            let cssValue = css[key];\n            if (key === \"class\" || key == \"psuedoClass\")\n                continue;\n            cssValue = this.check(key, cssValue);\n            key = this.parseVariables(key);\n            cssString += `${this.americanise(key)}: ${this.americanise(cssValue)};\\n`;\n        }\n        return cssString;\n    }\n    /**\n     * ## parseVariables\n     *\n     * Converts a camel case variable to kebab case.\n     *\n     * ### Behaviour:\n     * Method uses a regex to split the variable up at capital letters and add a hyphen.\n     *\n     * ### Parameters:\n     * - **variable** (`string`): Camel case variable.\n     *\n     * ### Returns:\n     * `string` - Kebab case variable.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const c = \"fontSize\";\n     * const k = parseVariables(c);\n     * console.log(c + \" -> \" + k);\n     * ```\n     * ```plaintext\n     *\n     * fontSize -> font-size\n     * ```\n     */\n    parseVariables(variable) {\n        return variable.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n    /**\n     * ## americanise\n     *\n     * Converts British → American CSS property names.\n     *\n     * ### Behaviour:\n     * Method matches CSS property names that are spelt using British English and converts them to American English.\n     *\n     * This allows for CSS to be written in British English.\n     *\n     * ### Parameters:\n     * - **variable** (`string`): Variable to be converted.\n     *\n     * ### Returns:\n     * `string` - Valid CSS property name.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const brit = \"colour\";\n     * const amer = americanise(brit);\n     * console.log(brit + \" -> \" + amer);\n     * ```\n     * ```plaintext\n     *\n     * colour -> color\n     * ```\n     */\n    americanise(variable) {\n        const convert = {\n            \"colour\": \"color\",\n            \"centre\": \"center\",\n            \"grey\": \"gray\",\n            \"behaviour\": \"behavior\"\n        };\n        const textValue = String(variable);\n        return convert[textValue] || textValue;\n    }\n    /**\n     * ## check\n     *\n     * Runs checks to compile variable types.\n     *\n     * ### Behaviour:\n     * Method takes the key and value of the CSSConfig and checks for conditions to compile\n     * the correct variable types.\n     *\n     * ### Parameters:\n     * - **key** (`string`): The key, e.g. (class, fontSize, background).\n     * - **value** (`CSSValue`): The value, e.g. (\"classname\", 100, var(--black100)).\n     *\n     * ### Returns:\n     * `string` | `CSSValue` - Valid CSS value.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const key = \"fontSize\";\n     * const val = 200;\n     * const css = check(key, val);\n     * console.log(css);\n     * ```\n     * ```plaintext\n     *\n     * 200px\n     * ```\n     */\n    check(key, value) {\n        if (key === \"fontSize\" && typeof value === 'number')\n            return `${value}px`;\n        else if ((key === \"opacity\" || key === \"fontWeight\") && typeof value === 'number')\n            return value;\n        else if (typeof value === 'number')\n            return `${value}px`;\n        else if (key === \"background\" || key === \"colour\" || key === \"border\")\n            return `var(--${value})`;\n        else\n            return value;\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/design.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/effects.js":
/*!***********************************************!*\
  !*** ./node_modules/jay-comp/dist/effects.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Effects: () => (/* binding */ Effects)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett, whondo.com\n *\n * Filename:    effect.ts\n * Authors:     Sarit Samkumpim, Josh Bassett\n * Date:        11/06/2025\n * Version:     1.1\n *\n * Licence:     Apache 2.0\n */\n/**\n * # Effects\n *\n * Class provides a CSS animation library.\n *\n * ### Overview:\n * The class provides a set of common reusable effects to help you build interactive\n * Comps quickly.\n *\n * The `prop()` API is used to define an animation property, then add the effect name\n * as the argument to access it within the CSS.\n *\n * ### Methods:\n * - **prop()**: API for defining a property.\n * - **fadeIn()**: Fade in effect.\n * - **fadeOut()**: Fade out effect.\n * - **fadeLeft()**: Fade left effect.\n * - **fadeRight()**: Fade right effect.\n * - **slideUp()**: Slide up from the bottom effect.\n * - **slideDown()**: Slide down from the top effect.\n * - **scale()**: Scale effect.\n * - **pulse()**: Pulse effect.\n * - **fadeOutLeft()**: Fade out left effect.\n * - **fadeOutRight()**: Fade out right effect.\n *\n * ### Example:\n * ```js\n * createCSS() {\n *     const effect = this.effect.slideUp(25); // Translates Y 25px\n *     const prop   = this.effect.prop(\"slideUp\", .5); // Runs for half a second\n *     const css = this.design.create({\n *         // css omitted\n *         animation: prop\n *     });\n *     return `\n *     ${effect}\n *     `;\n * }\n * ```\n */\nclass Effects {\n    /**\n     * ## Prop\n     *\n     * Creates a CSS animation property.\n     *\n     * ### Behaviour:\n     * Method creates a CSS animation property from the input. Note: the name of the effect needs\n     * to be present to target the correct animation.\n     *\n     * ### Parameters:\n     * - **name** (`string`): Name of effect.\n     * - **duration** (`string`): Duration of effect.\n     * - **timing** (`string`): Timing of effect.\n     * - **delay** (`string`): Delay of effect.\n     * - **iterate** (`string`): Repetitions of effect.\n     * - **direction** (`string`): Direction of effect.\n     * - **fillMode** (`string`): Style for effect when it's not playing.\n     *\n     * ### Returns:\n     * `string` - Valid CSS animation property.\n     *\n     * ### Example:\n     * ```js\n     * effects.prop(\"slideUp\", .5, \"ease-in-out\", .2);\n     * effects.prop(\"scale\", 1);\n     * effects.prop(\"fadeIn\", .5);\n     * ```\n     */\n    prop(name, duration, timing = \"ease\", delay = \"0\", iterate = \"1\", direction = \"normal\", fillMode = \"none\") {\n        return `${name} ${duration}s ${timing} ${delay}s ${iterate} ${direction} ${fillMode};`;\n    }\n    /**\n     * ## Fade In\n     *\n     * Provides an effect for fading in an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that gradually increase the opacity from 0 to 1.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-in effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeInCSS = effects.fadeIn();\n     * ```\n     */\n    fadeIn() {\n        return /* css */ `\n      @keyframes fadeIn {\n        0% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out\n     *\n     * Provides an effect for fading out an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's opacity from 1 to 0.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-out effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutCSS = effects.fadeOut();\n     * ```\n     */\n    fadeOut() {\n        return /* css */ `\n      @keyframes fadeOut {\n        0% {\n          opacity: 1;\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Left\n     *\n     * Provides an effect for fading in an element from the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels to translate the element from the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeLeftCSS = effects.fadeLeft(20);\n     * ```\n     */\n    fadeLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeLeft {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Right\n     *\n     * Provides an effect for fading in an element from the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels by which the element is translated to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeRightCSS = effects.fadeRight(20);\n     * ```\n     */\n    fadeRight(translateX) {\n        return /* css */ `\n      @keyframes fadeRight {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Up\n     *\n     * Provides an effect for sliding an element up into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated downward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset downward.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-up effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideUpCSS = effects.slideUp(20);\n     * ```\n     */\n    slideUp(translateY) {\n        return /* css */ `\n      @keyframes slideUp {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Down\n     *\n     * Provides an effect for sliding an element down into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated upward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-down effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideDownCSS = effects.slideDown(20);\n     * ```\n     */\n    slideDown(translateY) {\n        return /* css */ `\n      @keyframes slideDown {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Scale\n     *\n     * Provides an effect for scaling an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's scale from an initial value to a target value,\n     * while also transitioning from transparent to fully opaque.\n     *\n     * ### Parameters:\n     * - **scaleFrom** (`number`): The initial scale factor.\n     * - **scaleTo** (`number`): The target scale factor.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a scaling effect.\n     *\n     * ### Example:\n     * ```js\n     * const scaleCSS = effects.scale(0.8, 1);\n     * ```\n     */\n    scale(scaleFrom, scaleTo) {\n        return /* css */ `\n      @keyframes scaleIn {\n        0% {\n          opacity: 0;\n          transform: scale(${scaleFrom});\n        }\n        100% {\n          opacity: 1;\n          transform: scale(${scaleTo});\n        }\n      }\n    `;\n    }\n    /**\n     * ## Pulse\n     *\n     * Provides a pulsing effect for an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that scale an element up slightly and then return it to its original size,\n     * creating a subtle pulsating appearance.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a pulsing effect.\n     *\n     * ### Example:\n     * ```js\n     * const pulseCSS = effects.pulse();\n     * ```\n     */\n    pulse() {\n        return /* css */ `\n      @keyframes pulsing {\n        0% {\n          transform: scale(1);\n        }\n        50% {\n          transform: scale(1.05);\n        }\n        100% {\n          transform: scale(1);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Right\n     *\n     * Provides an effect for fading out an element to the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the right.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutRightCSS = effects.fadeOutRight(20);\n     * ```\n     */\n    fadeOutRight(translateX) {\n        return /* css */ `\n      @keyframes fadeOutRight {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Left\n     *\n     * Provides an effect for fading out an element to the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the left.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutLeftCSS = effects.fadeOutLeft(20);\n     * ```\n     */\n    fadeOutLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeOutLeft {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/effects.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/static/jay-comps/imports.js");
/******/ 	
/******/ })()
;