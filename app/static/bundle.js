/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./app/static/jay-comps/comp-pages/create.js":
/*!***************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/create.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass CreatePage extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n    \r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.name_ = \"Verify Page\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n    \r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */`\r\n        <comp-navbar></comp-navbar>\r\n        <div class=\"background\">\r\n            <div class=\"container\">\r\n                <dialog-box id=\"describe\"></dialog-box>\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const effect = this.effect.slideUp(20);\r\n        const prop   = this.effect.prop(\"slideUp\", .5);\r\n\r\n        const background = this.design.create({\r\n            class: \"background\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            justifyContent: \"centre\",\r\n            alignItems: \"centre\",\r\n            background: \"black10\",\r\n            overflow: \"hidden\",\r\n        });\r\n\r\n        const container = this.design.create({\r\n            class: \"container\",\r\n            background: \"white\",\r\n            animation: prop, \r\n            width: \"auto\",        \r\n        });\r\n\r\n        return /* css */ `\r\n       ${effect}\r\n       ${background}\r\n       ${container}\r\n        \r\n        `;\r\n    \r\n    }\r\n\r\n    hook() {\r\n\r\n        const dialogBox = this.shadowRoot.querySelector(\"#describe\");\r\n\r\n        customElements.whenDefined('dialog-box').then(() => {\r\n\r\n            requestAnimationFrame(() => {\r\n\r\n                dialogBox.hideButton();\r\n\r\n                dialogBox.title     = \"Email Verification\";\r\n                dialogBox.paragraph = \"We have sent you an email with a verification link.<br>If you do not receive an email, please check your spam.\";\r\n                dialogBox.svgIcon   = ` xmlns=\"http://www.w3.org/2000/svg\" height=\"64px\" viewBox=\"0 -960 960 960\" width=\"64px\" fill=\"currentColor\"><path d=\"m734-164-42-42 73-74H584v-60h181l-73-74 42-42 146 146-146 146ZM140-280q-24.75 0-42.37-17.63Q80-315.25 80-340v-440q0-24.75 17.63-42.38Q115.25-840 140-840h560q24.75 0 42.38 17.62Q760-804.75 760-780v232q-7.5-1-15-1.5t-15-.5q-8 0-15 .5t-15 1.5v-185L416-532 140-732v392h351q-1 8-1 13.5v13.75q0 8.25.5 16.5T493-280H140Zm36-500 240 174 246-174H176Zm-36 440v-440 440Z\"/`;\r\n            \r\n            });\r\n        \r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define('comp-create', CreatePage);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/create.js?");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/login.js":
/*!**************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/login.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass LoginPageComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.name_ = \"Login Page\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n    \r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n    \r\n        return /* html */ `\r\n        \r\n        <div class=\"background\">\r\n\r\n            <div class=\"itemContainer\">\r\n\r\n                <div class=\"modal\">\r\n\r\n                    <div class=\"textContainer\">\r\n                        <h3 class=\"title\">Login</h3>\r\n                        <p class=\"text\">Welcome back! Let's find you a new home.</p>\r\n                    </div>\r\n\r\n                    <div class=\"inputs\">\r\n                        <comp-input id=\"email\" name=\"email\"></comp-input>\r\n                        <comp-input id=\"password\" \r\n                        name=\"password\"></comp-input>\r\n                    </div>\r\n\r\n                    <div class=\"footer\">\r\n                        <comp-button id=\"submit\">Refresh Card</comp-button>\r\n                        <p class=\"link\"><a>Forgot password?</a></p>\r\n                    </div>\r\n                    <p id=\"result\"></p>\r\n                </div>\r\n\r\n            <div class=\"backgroundImage\">\r\n                <img class=\"image\" src=\"https://images.pexels.com/photos/4781426/pexels-photo-4781426.jpeg\">\r\n            </div>\r\n            </div>\r\n            \r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {   \r\n\r\n        // Background and image styling\r\n        const background = this.design.create({\r\n            class: \"background\",\r\n            width: \"100%\",\r\n            background: \"black100\",\r\n            height: \"100vh\",\r\n        });\r\n\r\n        const itemContainer = this.design.create({\r\n            class: \"itemContainer\",\r\n            display: \"flex\",\r\n        });\r\n\r\n        const imageBackground = this.design.create({\r\n            class: \"backgroundImage\",\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            paddingLeft: 400\r\n        });\r\n\r\n        const image = this.design.create({\r\n            class: \"image\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            objectFit: \"cover\"\r\n        });\r\n        \r\n        // Login modal styling\r\n        const modal = this.design.create({\r\n            class: \"modal\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            width: 500,\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            zIndex: 800,\r\n            padding: 20,\r\n            borderRadius: 14,\r\n            marginLeft: 100,\r\n            marginTop: 100\r\n        });\r\n\r\n        const inputs = this.design.create({\r\n            class: \"inputs\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            gap: 10,\r\n            paddingTop: 20,\r\n            paddingBottom: 40\r\n        });\r\n\r\n        // Link\r\n\r\n        const link = this.design.create({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            textDecoration: \"underline\",\r\n            cursor: \"pointer\"\r\n        });\r\n\r\n        const linkHover = this.design.create({\r\n            class: \"link\",\r\n            pseudoClass: \"hover\",\r\n            colour: \"black100\"\r\n        });\r\n\r\n        const textContainer = this.design.create({\r\n            class: \"textContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            gap: 5\r\n        });\r\n\r\n        const title = this.design.create({\r\n            class: \"title\",\r\n            fontWeight: \"bold\"\r\n        });\r\n\r\n        const text = this.design.create({\r\n            class: \"text\",\r\n            colour: \"black60\"\r\n        });\r\n        \r\n        const footer = this.design.create({\r\n            class: \"footer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            width: \"100%\",\r\n            gap: 10\r\n        });\r\n\r\n        // Media query adjustments\r\n        const itemContainerMob = this.design.create({\r\n            class: \"itemContainer\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\"\r\n        });\r\n\r\n        const imageBackgroundMob = this.design.create({\r\n            class: \"backgroundImage\",\r\n            height: \"40vh\",\r\n            margin: 0,\r\n            padding: 0\r\n        });\r\n\r\n        const modalMob = this.design.create({\r\n            class: \"modal\",\r\n            width: \"auto\",\r\n            margin: 0,\r\n            marginTop: 200\r\n        });\r\n    \r\n        return /* css */ `\r\n        ${background}\r\n\r\n        ${itemContainer}\r\n\r\n        ${imageBackground}\r\n        ${image}\r\n\r\n        ${modal}\r\n        ${inputs}\r\n        ${link}\r\n        ${linkHover}\r\n\r\n        ${textContainer}\r\n        ${title}\r\n        ${text}\r\n\r\n        ${footer}\r\n        \r\n        @media (max-width: 600px) {\r\n           ${itemContainerMob}\r\n           ${imageBackgroundMob}\r\n           ${modalMob}\r\n        }\r\n        `;\r\n    \r\n    }\r\n\r\n    openWindow() {\r\n\r\n        window.location.assign(\"/register\");\r\n    \r\n    }\r\n\r\n    async login(result, json) {\r\n\r\n        let data = await this.api.request(\"/login\", \"POST\", json);\r\n        \r\n        (data.status) ? result.innerHTML = data.message : result.innerHTML = data.error;\r\n    \r\n    }\r\n\r\n    hook() {\r\n\r\n        const compButton = this.shadowRoot.getElementById(\"submit\");\r\n        const result     = this.shadowRoot.getElementById(\"result\");\r\n        const email      = this.shadowRoot.getElementById(\"email\");\r\n        const pass       = this.shadowRoot.getElementById(\"password\");\r\n        \r\n        compButton.text = \"Login\";\r\n        email.label     = \"Email\";\r\n        email.prompt    = \"Enter email\";\r\n        pass.label      = \"Password\";\r\n        pass.type       = \"password\";\r\n        pass.prompt     = \"Enter password\";\r\n\r\n        compButton.addEventListener(\"click\", () => {\r\n            \r\n            let cookie   = \"true\";\r\n            let jsonData = {email : email.value, password : pass.value, consent: cookie};\r\n\r\n            this.login(result, jsonData);\r\n        \r\n        });\r\n    \r\n    }\r\n  \r\n}\r\n\r\ncustomElements.define(\"comp-login\", LoginPageComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/login.js?");

/***/ }),

/***/ "./app/static/jay-comps/comp-pages/register.js":
/*!*****************************************************!*\
  !*** ./app/static/jay-comps/comp-pages/register.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass RegisterPageComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.name_ = \"Register page\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();\r\n    \r\n    }\r\n    \r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"background\">\r\n\r\n            <div class=\"container\">\r\n\r\n                <div class=\"modal\">\r\n\r\n                    <form id=\"register\" class=\"formObj\">\r\n\r\n                        <!-- Personal information -->\r\n                        <div id=\"step1\">\r\n                            <div class=\"textContainer\">\r\n                                <p class=\"text\">Step 1/2</p>\r\n                                <h4 class=\"title\">Personal Details</h4> \r\n                            </div>\r\n\r\n                            <p class=\"text\">Let's find out a bit more about you!</p>\r\n\r\n                            <div class=\"input\">\r\n                                <div class=\"inputRow\">\r\n                                    <comp-input id=\"name\" name=\"name\"></comp-input>\r\n                                    <comp-input id=\"surname\" name=\"surname\"></comp-input>\r\n                                </div>\r\n                                \r\n                                <comp-input id=\"email\" name=\"email\"></comp-input>\r\n                                <comp-input id=\"password\" name=\"password\"></comp-input>\r\n                                <comp-input id=\"confirm\" name=\"confirm\"></comp-input>\r\n                            </div>\r\n\r\n                            <div class=\"footer\">\r\n                                <div class=\"btnRow\">\r\n                                    <comp-button class=\"back\" id=\"backBtn\" type=button></comp-button>\r\n                                    <comp-button class=\"next\" id=\"nextBtn\" type=button></comp-button>\r\n                                </div>\r\n                                <p>Have an account?<a href=\"/login\" class=\"link\"> Login</a></p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- User personalisation  -->\r\n                        <div id=\"step2\" hidden>\r\n\r\n                            <div class=\"textContainer\">\r\n                                <p class=\"text\">Step 2/2</p>\r\n                                <h4 class=\"title\">Personalise</h4> \r\n                            </div>\r\n\r\n                            <p class=\"text\">Let's find out a bit more about you!</p>\r\n\r\n                             <div class=\"inputRow\">\r\n                                <comp-input id=\"age\" name=\"age\"></comp-input>\r\n                                <comp-input id=\"occupation\" name=\"occupation\"></comp-input>\r\n                            </div>\r\n\r\n                            <div class=\"input\">\r\n                                <comp-input id=\"bio\" name=\"bio\"></comp-input>\r\n                                <comp-input id=\"picture\" name=\"picture\"></comp-input>\r\n                            </div>\r\n\r\n                            <div class=\"footer\">\r\n                                <div class=\"btnRow\">\r\n                                    <comp-button class=\"back\" id=\"backBtn2\" type=\"button\"></comp-button>\r\n                                    <comp-button class=\"submit\" id=\"submit\" type=\"submit\"></comp-button>\r\n                                </div>\r\n                                <p>Have an account?<a href=\"/login\" class=\"link\"> Login</a></p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div class=\"backgroundImage\">\r\n                <img class=\"image\" src=\"https://images.pexels.com/photos/4569340/pexels-photo-4569340.jpeg\">\r\n            </div>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS(){\r\n        \r\n        const background = this.design.create({\r\n            class: \"background\",\r\n            width: \"100%\",\r\n            minHeight: \"100vh\",\r\n            background: \"black100\",     \r\n            overflow: \"hidden\"       \r\n        });\r\n\r\n        const form = this.design.create({\r\n            class: \"formObj\",\r\n            width: \"100%\"\r\n        });\r\n        \r\n        const container = this.design.create({\r\n            class: \"container\",\r\n            display: \"flex\",\r\n        });\r\n\r\n        const backgroundImage = this.design.create({\r\n            class: \"backgroundImage\",\r\n            width: \"100%\",\r\n            height: 1000,\r\n            paddingLeft: 400,\r\n        });\r\n\r\n        const image = this.design.create({\r\n            class: \"image\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            objectFit: \"cover\"\r\n        });\r\n\r\n        const modal = this.design.create({\r\n            class: \"modal\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            width: \"100%\",\r\n            maxWidth: 500,  \r\n            minWidth: 320,\r\n            background: \"white\",\r\n            position: \"absolute\",\r\n            zIndex: 800,\r\n            padding: 20,\r\n            borderRadius: 14,\r\n            marginLeft: 100,\r\n            marginTop: 150\r\n        });\r\n\r\n        const input = this.design.create({\r\n            class: \"input\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            gap: 20,\r\n            paddingTop: 20,\r\n            paddingBottom: 40,\r\n        });\r\n\r\n        const inputRow = this.design.create({\r\n            class: \"inputRow\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            gap: 15,\r\n            width: \"100%\",\r\n            justifyContent: \"space-between\"\r\n        });\r\n\r\n        const btnRow = this.design.create({\r\n            class: \"btnRow\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            gap: 15,\r\n            width: \"100%\",\r\n            justifyContent: \"space-between\"\r\n        });\r\n\r\n        const title = this.design.create({\r\n            class: \"title\",\r\n            fontWeight: \"bold\"\r\n        });\r\n\r\n        const link = this.design.create({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            fontWeight: \"bold\", \r\n            textDecoration: \"underline\",\r\n            cursor: \"pointer\",\r\n        });\r\n\r\n        const linkHover = this.design.create({\r\n            class: \"link\",\r\n            pseudoClass: \"hover\",\r\n            colour: \"black100\",\r\n        });\r\n\r\n        const textContainer = this.design.create({\r\n            class: \"textContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            gap: 5,\r\n        });\r\n\r\n        const text = this.design.create({\r\n            class: \"text\",\r\n            colour: \"black60\",\r\n            display: \"flex\",\r\n            alignSelf: \"start\",\r\n            \r\n        });\r\n\r\n        const footer = this.design.create({\r\n            class: \"footer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\",\r\n            width: \"100%\",\r\n            gap: 10,\r\n        });\r\n\r\n        const inputError = this.design.create({\r\n            class: \"input-error\",\r\n            colour: \"red\",\r\n            fontSize: 12,\r\n            marginTop: 4,\r\n        });\r\n\r\n        /**\r\n         * Media query content\r\n         */\r\n        const containerMob = this.design.create({\r\n            class: \"container\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"centre\"\r\n        });\r\n\r\n        const backgroundMob = this.design.create({\r\n            class: \"background\",\r\n            height: 1000\r\n        });\r\n\r\n        const backgroundImageMob =  this.design.create({\r\n            class: \"backgroundImage\",\r\n            height: \"40vh\",\r\n            margin: 0,\r\n            padding: 0\r\n        });\r\n\r\n        const modalMob = this.design.create({\r\n            class: \"modal\",\r\n            width: \"100%\",\r\n            maxWidth: 350,\r\n            minWidth: 250,\r\n            margin: 0,\r\n            marginTop: 150,\r\n            boxSizing: \"border-box\"\r\n        });\r\n        \r\n        const inputMob = this.design.create({\r\n            class: \"input\",\r\n            paddingTop: 10,\r\n            paddingBottom: 20,\r\n            gap: 15,\r\n        });\r\n\r\n        const inputRowMob = this.design.create({\r\n            class: \"inputRow\",\r\n            flexDirection: \"column\",\r\n        });\r\n\r\n        return /* css */ `\r\n        ${background}\r\n        ${container}\r\n        ${form}\r\n        ${backgroundImage}\r\n        ${image}\r\n        ${modal}\r\n        ${input}\r\n        ${inputRow}\r\n        ${btnRow}\r\n        ${link}\r\n        ${linkHover}\r\n        ${inputError}\r\n        ${textContainer}\r\n        ${title}\r\n        ${text}\r\n        ${footer}\r\n        \r\n        @media (max-width: 600px){\r\n            ${containerMob}\r\n            ${backgroundImageMob}\r\n            ${backgroundMob}\r\n            ${modalMob}\r\n            ${inputMob}\r\n            ${inputRowMob}\r\n        }\r\n        `;\r\n\r\n    }\r\n\r\n    /**\r\n     * Helper method validates password inputs.\r\n     * @param {string} input1 \r\n     * @param {string} input2 \r\n     * @returns Valid status\r\n     */\r\n    checkPassword(input1, input2) {\r\n\r\n        return (input1.value.trim() == input2.value.trim()) ? true : false;\r\n    \r\n    }\r\n\r\n    /**\r\n     * Helper method validates a list of all inputs and returns valid status.\r\n     * @param {Array<HTMLElement>} inputs \r\n     * @returns Valid status\r\n     */\r\n    validateElements(inputs) {\r\n\r\n        let isValid = true;\r\n        for(let i in inputs){\r\n\r\n            console.log(inputs[i].value);\r\n            \r\n            // LOOK AT THIS LATER\r\n            if(inputs[i].required && inputs[i].isEmpty()){\r\n\r\n                const inputField = inputs[i].shadowRoot.querySelector(\".inputValue\");\r\n                inputField.classList.add(\"strength-very-weak\");\r\n                isValid = false;\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        return (!this.checkPassword(inputs[3], inputs[4])) ? false : isValid;\r\n    \r\n    }\r\n\r\n    /*\r\n    REFACTOR THIS SHIT\r\n    - in input add a new field for underline which can be adjusted etc\r\n    */\r\n    showError(inputComp, message){\r\n\r\n        // REVIEW LATER\r\n        const field = inputComp.shadowRoot.querySelector(\".inputValue\");\r\n        const error = document.createElement(\"div\");\r\n\r\n        error.className   = \"input-error\" ;\r\n        error.textContent = message;\r\n\r\n        field.classList.add(\"strength-very-weak\");\r\n\r\n        const existing = field.parentElement.querySelector(\".input-error\");\r\n        if(!existing) field.insertAdjacentElement(\"afterend\", error);\r\n        \r\n    }\r\n    clearError(inputComp){\r\n\r\n        const field = inputComp.shadowRoot.querySelector(\".inputValue\");\r\n        field.classList.remove(\"strength-very-weak\");\r\n\r\n        const existing = field.parentElement.querySelector(\".input-error\");\r\n        if(existing) existing.remove();\r\n        \r\n    }\r\n\r\n    // MOVE TO NEW PASSWORD INPUT LATER\r\n    validateEntropy(password, confirmPass) {\r\n\r\n        if (confirmPass.value == '' || password.value == '') return;\r\n        else if (confirmPass.value === password.value) confirmPass.shadowRoot.querySelector(\".inputValue\").classList.add(\"strength-green\");\r\n        else confirmPass.shadowRoot.querySelector(\".inputValue\").classList.remove(\"strength-green\");\r\n    \r\n    }\r\n\r\n    submitForm(form) {\r\n        // grab the form\r\n        // manually submit\r\n        // validate response\r\n    }\r\n\r\n    hook(){\r\n\r\n        /**\r\n         * Comp elements, and styling\r\n         */\r\n        const step1        = this.shadowRoot.getElementById(\"step1\");\r\n        const step2        = this.shadowRoot.getElementById(\"step2\");\r\n        const backButton   = this.shadowRoot.getElementById(\"backBtn\");\r\n        const nextButton   = this.shadowRoot.getElementById(\"nextBtn\");\r\n        const submitButton = this.shadowRoot.getElementById(\"submit\");\r\n        const email        = this.shadowRoot.getElementById(\"email\");\r\n        const password     = this.shadowRoot.getElementById(\"password\");\r\n        const confirmPass  = this.shadowRoot.getElementById(\"confirm\");\r\n        const name         = this.shadowRoot.getElementById(\"name\");\r\n        const surname      = this.shadowRoot.getElementById(\"surname\");\r\n        const age          = this.shadowRoot.getElementById(\"age\");\r\n        const occupation   = this.shadowRoot.getElementById(\"occupation\");\r\n        const bio          = this.shadowRoot.getElementById(\"bio\");\r\n        const picture      = this.shadowRoot.getElementById(\"picture\");\r\n\r\n        backButton.text      = \"Back\";\r\n        backButton.variant   = 2;\r\n        nextButton.text      = \"Next\";\r\n        nextButton.variant   = 1;\r\n        submitButton.text    = \"Register\";\r\n        submitButton.variant = 1;\r\n        \r\n        /**\r\n         * Form inputs\r\n         * - email\r\n         * - password\r\n         * - name\r\n         * - surname\r\n         * - age\r\n         * - occupation\r\n         * - bio\r\n         * - profile picture\r\n         * \r\n         * Required fields are also set\r\n         */\r\n        email.label            = \"Email\";\r\n        email.prompt           = \"Enter email\";\r\n        email.type             = \"email\";\r\n        password.label         = \"Password\";\r\n        password.prompt        = \"Password\";\r\n        password.type          = \"password\";\r\n        password.enableEntropy = true;\r\n        confirmPass.label      = \"Confirm Password\";\r\n        confirmPass.type       = \"password\";\r\n        confirmPass.prompt     = \"Confirm password\";\r\n        name.label             = \"Name\";\r\n        name.prompt            = \"Enter name\";\r\n        surname.label          = \"Surname\";\r\n        surname.prompt         = \"Enter surname\";\r\n        age.label              = \"Age\";\r\n        age.prompt             = \"Enter your age\";\r\n        age.type               = \"number\";\r\n        occupation.label       = \"Occupation\";\r\n        occupation.prompt      = \"Eg. student\";\r\n        occupation.type        = \"text\";\r\n        bio.label              = \"Bio\";\r\n        bio.prompt             = \"Tell us more about you...\";\r\n        bio.type               = \"textarea\";\r\n        picture.label          = \"Profile picture\";\r\n        picture.prompt         = \"Upload photo\";\r\n        picture.type           = \"file\";\r\n\r\n        name.required        = true;\r\n        surname.required     = true;\r\n        email.required       = true;\r\n        password.required    = true;\r\n        confirmPass.required = true;\r\n\r\n        // Input validation\r\n        nextButton.addEventListener(\"click\", () => {\r\n\r\n            let valid = this.validateElements([name, surname, email, password, confirmPass]);\r\n            if (valid) {\r\n\r\n                step1.setAttribute(\"hidden\", \"\");\r\n                step2.removeAttribute(\"hidden\");\r\n            \r\n            } else console.log(valid);\r\n        \r\n        });\r\n\r\n        \r\n        confirmPass.addEventListener(\"input\", () => {\r\n            \r\n            this.validateEntropy(password, confirmPass);\r\n\r\n        });\r\n\r\n        password.addEventListener(\"input\", () => {\r\n            \r\n            this.validateEntropy(password, confirmPass);\r\n\r\n        });\r\n\r\n        /**\r\n         * @brief clear all input field status with when user type in the box\r\n         * clean ui\r\n         */\r\n        [name, surname, email, password, confirmPass].forEach(input => {\r\n\r\n            input.addEventListener(\"input\", () => {\r\n\r\n                this.clearError(input);\r\n            \r\n            });\r\n\r\n        });\r\n\r\n\r\n        /**\r\n         * @brief Event for going back to step1 \r\n         */\r\n        const backBtn2 = this.shadowRoot.getElementById(\"backBtn2\");\r\n\r\n        backBtn2.addEventListener(\"click\", () => {\r\n            \r\n            step2.setAttribute(\"hidden\", \"\");\r\n            step1.removeAttribute(\"hidden\");\r\n        \r\n        });\r\n\r\n        const loginLink = this.shadowRoot.querySelector(\".link\");\r\n\r\n        loginLink.addEventListener(\"click\", (e) => {\r\n\r\n            e.preventDefault;\r\n            this.openWindow();\r\n\r\n        });\r\n\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-register\", RegisterPageComp);\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comp-pages/register.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/button.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/button.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\r\n * Copyright (c) 2025 Josh Bassett, whondo.com\r\n * \r\n * Filename:    button.js\r\n * Author:      Josh Bassett\r\n * Date:        10/06/2025\r\n * Version:     1.0\r\n * \r\n * Description: Class that creates a reusable Button Comp.\r\n */\r\n\r\n\r\n\r\nclass ButtonComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();                                                    \r\n\r\n        this.text_    = \"This is a button\";\r\n        this.variant_ = 1;    \r\n        \r\n        this.name_ = \"Button\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button text.\r\n     * \r\n     * @param {string} newText\r\n     */\r\n    set text(newText) {\r\n\r\n        this.text_ = newText;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button variant (1, 2, 3).\r\n     * \r\n     * @param {string} newVariant\r\n     */\r\n    set variant(newVariant) {\r\n\r\n        this.variant_ = newVariant;\r\n        this.update(this.html_, this.createCSS());\r\n    \r\n    }\r\n    \r\n    /**\r\n     * @brief A getter method that returns the Comp's button text.\r\n     * \r\n     * @returns {string} Comp's button text. \r\n     */\r\n    get text() {\r\n\r\n        return this.text_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button variant.\r\n     * \r\n     * @returns {number} Comp's button variant. \r\n     */\r\n    get variant() {\r\n\r\n        return this.variant_;\r\n    \r\n    }\r\n    \r\n    createHTML() {\r\n\r\n        \r\n        return /* html */ `\r\n            <button class=\"button\">${this.text_}</button>`;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        let button, buttonHover, buttonActive;\r\n\r\n        const primary = this.design.create({\r\n            class: \"button\",\r\n            colour: \"white\",\r\n            width: \"100%\",\r\n            background: \"black100\",\r\n            padding: \"12px 28px\",\r\n            border: \"black100\",\r\n            borderRadius: 8,\r\n            fontSize: 16,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const primaryHover = this.design.create({\r\n            class: \"button\",\r\n            pseudoClass: \"hover\",\r\n            border: \"black\",\r\n            background: \"black80\",\r\n        });\r\n\r\n        const primaryActive = this.design.create({\r\n            class: \"button\",\r\n            pseudoClass: \"active\",\r\n            border: \"black60\",\r\n            background: \"black60\"\r\n        });\r\n\r\n        const secondary = this.design.create({\r\n            class: \"button\",\r\n            colour: \"black100\",\r\n            background: \"black10\",\r\n            width: \"100%\",\r\n            border: \"border\",\r\n            padding: \"12px 28px\",\r\n            borderRadius: 8,\r\n            fontSize: 16,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const secondaryHover = this.design.create({\r\n            class: \"button\",\r\n            pseudoClass: \"hover\",\r\n            background: \"black20\"\r\n        });\r\n\r\n        const secondaryActive = this.design.create({\r\n            class: \"button\",\r\n            pseudoClass: \"active\",\r\n            background: \"black40\"\r\n        });\r\n        \r\n        if (this.variant_ == 1) {\r\n\r\n            button       = primary;\r\n            buttonHover  = primaryHover;\r\n            buttonActive = primaryActive;\r\n        \r\n        }\r\n        \r\n        else if (this.variant_ == 2) {\r\n\r\n            button       = secondary;\r\n            buttonHover  = secondaryHover;\r\n            buttonActive = secondaryActive;\r\n        \r\n        }\r\n\r\n        return `\r\n        ${button}\r\n        ${buttonHover}\r\n        ${buttonActive}\r\n        `;\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-button\", ButtonComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/button.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/card.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/card.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/**\r\n * Copyright (c) 2025 Josh Bassett, whondo.com\r\n * \r\n * Filename:    card.js\r\n * Author:      Josh Bassett\r\n * Date:        10/06/2025\r\n * Version:     1.0\r\n * \r\n * Description: Class that creates a reusable Card Comp.\r\n */\r\n\r\n\r\n\r\nclass CardComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.cardTitle_    = \"Card header\";\r\n        this.cardText_     = \"Card text goes here.\";\r\n        this.buttonText_   = \"Card Action\";\r\n        this.buttonAction_ = this.debug;\r\n        this.cardImage_    = \"\";\r\n\r\n        this.name_ = \"Card\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's title.\r\n     * \r\n     * @param {string} newCardTitle\r\n     */\r\n    set cardTitle(newCardTitle) {\r\n       \r\n        this.cardTitle_ = newCardTitle;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's text.\r\n     * \r\n     * @param {string} newCompText\r\n     */\r\n    set cardText(newCompText) {\r\n\r\n        this.cardText_ = newCompText;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button text.\r\n     * \r\n     * @param {string} newButtonText\r\n     */\r\n    set buttonText(newButtonText) {\r\n\r\n        this.buttonText_ = newButtonText;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's button link.\r\n     * \r\n     * @param {string} newButtonAction\r\n     */\r\n    set buttonAction(newButtonAction) {\r\n\r\n        this.buttonAction_ = newButtonAction;\r\n        this.update(this.html_, this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A setter method that sets the Comp's image link.\r\n     * \r\n     * @param {string} newCardImage\r\n     */\r\n    set cardImage(newCardImage) {\r\n\r\n        this.cardImage_ = newCardImage;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's title.\r\n     * \r\n     * @returns {string} Comp's title. \r\n     */\r\n    get cardTitle() {\r\n\r\n        return this.cardTitle_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's text.\r\n     * \r\n     * @returns {string} Comp's text. \r\n     */\r\n    get cardText() {\r\n\r\n        return this.cardText_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button text.\r\n     * \r\n     * @returns {string} Comp's button text. \r\n     */\r\n    get buttonText() {\r\n\r\n        return this.buttonText_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's button link.\r\n     * \r\n     * @returns {string} Comp's button link. \r\n     */\r\n    get buttonAction() {\r\n        \r\n        return this.buttonAction_;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A getter method that returns the Comp's card image.\r\n     * \r\n     * @returns {string} Comp's card image. \r\n     */\r\n    get cardImage() {\r\n\r\n        return this.cardImage_;\r\n    \r\n    }\r\n    \r\n    /**\r\n     * @brief A method that builds the card's HTML.\r\n     * \r\n     * @returns {literal} HTML to be injected into Comp. \r\n     */\r\n    createHTML() {\r\n\r\n        let imageHTML = '';\r\n\r\n        if (this.cardImage_) imageHTML = /* html */`<img src=\"${this.cardImage_}\">`;\r\n\r\n        return /* html */ `\r\n        <div class=\"cardContainer\">\r\n            ${imageHTML}\r\n            <div class=\"textContainer\">\r\n                <h2>${this.cardTitle_}</h2>\r\n                <p>${this.cardText_}</p>\r\n            </div>\r\n            <comp-button id=\"button\"></comp-button>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that builds the card's CSS.\r\n     * \r\n     * @returns {literal} CSS to be injected into Comp.\r\n     */\r\n    createCSS() {\r\n        \r\n        const cardStyle = this.design.create({\r\n            valueID: \"cardContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n            width: \"100%\", \r\n            maxWidth: 500, \r\n            padding: 20,\r\n            alignItems: \"start\",\r\n            border: true,\r\n            borderRadius: 15,\r\n            gap: 20,\r\n            background: \"white\"\r\n        });\r\n\r\n        const textCardStyle = this.design.create({\r\n            valueID: \"textContainer\",\r\n            direction: \"column\", \r\n            width: \"100%\",\r\n            maxWidth: 500, \r\n            padding: 0, \r\n            alignItems: \"start\", \r\n            border: false\r\n        });\r\n\r\n        return `\r\n        ${cardStyle}\r\n        ${textCardStyle}\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that opens a new page, with Safari support.\r\n     * \r\n     * @param {any} event \r\n     */\r\n    onButtonClick(event) {\r\n\r\n        event.preventDefault();\r\n \r\n        this.buttonAction_();\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief A method that runs a build hook when the Component is rendered it\r\n     *        provides the inner JavaScript logic for the Comp. \r\n     */\r\n    hook() {\r\n\r\n        const cardButton         = this.shadowRoot.getElementById(\"button\");\r\n        cardButton.buttonVarient = 2;\r\n\r\n        cardButton.addEventListener(\"click\", this.onButtonClick.bind(this));\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-card\", CardComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/card.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/dialog.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/dialog.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass DialogComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        \r\n        this.title_     = \"Hello World\";\r\n        this.paragraph_ = \"This is a paragraph\";\r\n        this.svgIcon_   = \"\";\r\n        this.text_      = \"this is a button\";\r\n\r\n        this.name_ = \"Dialog\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();    \r\n    \r\n    }\r\n\r\n    set title(newTitle){\r\n\r\n        this.title_ = newTitle;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n\r\n    set paragraph(value){\r\n\r\n        this.paragraph_ = value;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    set svgIcon(value){\r\n\r\n        this.svgIcon_ = value;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    set text(value){\r\n\r\n        this.text_ = value;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    get paragraph() {\r\n\r\n        return this.paragraph_;\r\n    \r\n    }\r\n\r\n    get title() {\r\n\r\n        return this.title_;\r\n    \r\n    }\r\n\r\n\r\n    get svgIcon() {\r\n\r\n        return this.svgIcon_;\r\n    \r\n    }\r\n\r\n    get text() {\r\n\r\n        return this.text_;\r\n    \r\n    }\r\n\r\n    hideButton() {\r\n\r\n        requestAnimationFrame(() => {\r\n\r\n            const btn = this.shadowRoot?.querySelector(\"comp-button\");\r\n            if (btn) btn.setAttribute(\"hidden\", \"\");\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    showButton() {\r\n\r\n        requestAnimationFrame(() => {\r\n\r\n            const btn = this.shadowRoot?.querySelector(\"comp-button\");\r\n            if (btn) btn.removeAttribute(\"hidden\");\r\n        \r\n        });\r\n\r\n    }\r\n\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n            <div class=\"background\">\r\n\r\n                <div class=\"container\">\r\n\r\n                    <!--svg logo go here-->\r\n                    <svg class=\"icon\" ${this.svgIcon_}></svg>\r\n                    <h3 class=\"head\">${this.title_}</h3>\r\n                    <p class=\"dialog\">${this.paragraph_}</p>\r\n                    <comp-button class=\"btn\">${this.text_}</comp-button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const background = this.design.create({\r\n            class: \"background\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            alignItems: \"centre\",\r\n            border: false,\r\n            gap: 0,\r\n            background: \"black10\",\r\n            justifyContent: \"centre\"\r\n        });\r\n\r\n        const backgroundMobile = this.design.create({\r\n            class: \"background\",\r\n            padding: 20,\r\n            width: \"auto\",\r\n        });\r\n\r\n        const container = this.design.create({\r\n            class: \"container\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"auto\",\r\n            maxWidth: 500,\r\n            padding: 20,\r\n            alignItems: \"centre\",\r\n            border: \"border\",\r\n            borderRadius: 16,\r\n            gap: 10,\r\n            background: \"white\",\r\n            textAlign: \"start\",\r\n            marginTop: 0,\r\n        });\r\n\r\n        const head = this.design.create({\r\n            class: \"head\",\r\n            fontSize: 24,\r\n            alignSelf: \"center\",\r\n            lineHeight: 30,\r\n        });\r\n\r\n        const dialog = this.design.create({\r\n            class: \"dialog\",\r\n            fontSize: 16,\r\n            textAlign: \"start\",\r\n        });\r\n\r\n        const icon = this.design.create({\r\n            class: \"icon\",\r\n            colour: \"black80\",\r\n        });\r\n\r\n        return /* css */ `\r\n            ${background}\r\n            ${container}\r\n            ${icon}\r\n            ${head}\r\n            ${dialog}\r\n\r\n            @media (max-width: 600px){\r\n                ${backgroundMobile}\r\n            }\r\n\r\n        `;\r\n    \r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncustomElements.define(\"dialog-box\", DialogComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/dialog.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/file.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/file.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/input.js\");\n\r\n/** @extends {InputComp} */\r\nclass FileComp extends _input_js__WEBPACK_IMPORTED_MODULE_0__.InputComp {\r\n\r\n    constructor(){\r\n\r\n        super();\r\n\r\n        this.type_ = \"file\";\r\n        \r\n        this.name_ = \"File Comp\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML(){\r\n\r\n        return /* html */`\r\n           \r\n            <div class=\"inputContainer\">\r\n                <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n                <div class=\"fileWrapper\">\r\n                    <div class=\"fileBox\">\r\n                        <img class=\"filePreview\" src=\"\" hidden>\r\n                        <span class=\"icon\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"currentColor\">\r\n                                <path d=\"M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z\"/>\r\n                            </svg>\r\n                        </span>\r\n                        <span class=\"filePrompt\">${this.prompt_}</span>\r\n                        <input class=\"inputValue fileInput\" type=\"file\" accept=\".png\" hidden>\r\n                        <comp-button class=\"reuploadBtn\" hidden></comp-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS(){\r\n\r\n       \r\n        const fileStyle = this.design.create({\r\n            class: \"fileInput\",\r\n            display: \"none\",\r\n        });\r\n\r\n        const fileWrapper = this.design.create({\r\n            class: \"fileWrapper\",\r\n            width: \"100%\",\r\n            cursor: \"pointer\"\r\n        });\r\n\r\n        const fileBox = this.design.create({\r\n            class: \"fileBox\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            width: \"100%\",\r\n            maxWidth: \"100%\",\r\n            padding: 20,\r\n            border: \"2px\",\r\n            borderRadius: \"12px\",\r\n            borderStyle: \"dotted\",\r\n            background: \"white\",\r\n            gap: 8,\r\n            boxSizing: \"border-box\",\r\n            textAlign: \"center\"\r\n        });\r\n\r\n        const icon = this.design.create({\r\n            class: \"icon\",\r\n            fontSize: \"2rem\",\r\n            fontWeight: \"bold\",\r\n            colour: \"black80\",\r\n        });\r\n\r\n        const filePrompt = this.design.create({\r\n            class: \"filePrompt\",\r\n            fontSize: \"0.9rem\",\r\n            colour: \"black60\",\r\n\r\n        });\r\n        \r\n        const fileHover = this.design.create({\r\n            class: \"fileBox\",\r\n            pseudoClass: \"hover\",\r\n            outline: \"solid 2px var(--black60)\"\r\n        });\r\n\r\n        const fileActive = this.design.create({\r\n            class: \"fileBox\",\r\n            pseudoClass: \"focus\",\r\n            outline: \"solid 2px var(--black100)\"\r\n        });\r\n\r\n        const filesBoxDrag = this.design.create({\r\n            class: \"dragover\",\r\n            outline: \"solid 2px var(--black100)\",\r\n            background: \"back10\",\r\n        });\r\n\r\n        const filePreview = this.design.create({\r\n            class: \"filePreview\",\r\n            width: \"auto\",             \r\n            maxWidth: \"150px\",       \r\n            maxHeight: \"150px\",        \r\n            objectFit: \"cover\",\r\n            display: \"block\",\r\n            marginTop: 8,\r\n            marginLeft: \"auto\",        \r\n            marginRight: \"auto\",\r\n            borderRadius: 6,\r\n        });\r\n\r\n        const reuploadBtn = this.design.create({\r\n            class: \"reuploadBtn\",\r\n            width: \"auto\",\r\n            marginTop: 12,\r\n        });\r\n\r\n        const fileBoxMob = this.design.create({\r\n            class: \"filePreview\",\r\n            maxWidth: \"100px\",     \r\n            maxHeight: \"100px\",\r\n            marginTop: 8,\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n\r\n        });\r\n\r\n        const filePreMob = this.design.create({\r\n            class: \"filePreview\",\r\n            maxWidth: \"100%\",\r\n            height: \"auto\",\r\n            objectFit: \"cover\",\r\n            borderRadius: 6,\r\n        });\r\n\r\n        const filePromptMob = this.design.create({\r\n            class: \"filePrompt\",\r\n            fontSize: \"0.8rem\",\r\n            wordWrap: \"break-word\",\r\n            maxWidth: 120\r\n        });\r\n\r\n        const reloadMob = this.design.create({\r\n            marginTop:  8,\r\n            width: \"100%\",\r\n        });\r\n\r\n        return /* css */`\r\n        ${fileWrapper}\r\n        ${fileBox}\r\n        ${icon}\r\n        ${filePrompt}\r\n        ${fileStyle}\r\n        ${fileHover}\r\n        ${fileActive}\r\n        ${filesBoxDrag}\r\n        ${filePreview}\r\n        ${reuploadBtn}\r\n\r\n        @media (max-width: 600px){\r\n            ${fileBoxMob}\r\n            ${filePreMob}\r\n            ${filePromptMob}\r\n            ${reloadMob}\r\n        }\r\n        \r\n\r\n\r\n        `; \r\n    \r\n    }\r\n\r\n    hook(){\r\n\r\n        const fileInput  = this.shadowRoot.querySelector(\".fileInput\");\r\n        const filePrompt = this.shadowRoot.querySelector(\".filePrompt\");\r\n        const icon       = this.shadowRoot.querySelector(\".icon\");\r\n        const preview    = this.shadowRoot.querySelector(\".filePreview\");\r\n        const dropArea   = this.shadowRoot.querySelector(\".fileBox\");\r\n\r\n        // Clicking the fileBox opens the input\r\n        dropArea?.addEventListener(\"click\", () => fileInput?.click());\r\n\r\n        // Re-upload logic\r\n        customElements.whenDefined(\"comp-button\").then(() => {\r\n\r\n            requestAnimationFrame(() => {\r\n\r\n                const reuploadBtn = this.shadowRoot.querySelector(\".reuploadBtn\");\r\n                if (reuploadBtn) {\r\n\r\n                    reuploadBtn.text    = \"Upload another\";\r\n                    reuploadBtn.variant = 2;\r\n                    reuploadBtn.addEventListener(\"click\", (e) => {\r\n\r\n                        e.stopPropagation();\r\n                        fileInput.value = \"\";\r\n                        fileInput?.click();\r\n                    \r\n                    });\r\n                \r\n                }\r\n            \r\n            });\r\n        \r\n        });\r\n\r\n        // File selection logic\r\n        fileInput?.addEventListener(\"change\", () => {\r\n\r\n            const file = fileInput.files[0];\r\n            if (file) {\r\n\r\n                filePrompt.textContent = file.name;\r\n                icon.setAttribute(\"hidden\", \"\");\r\n\r\n                if (file.type.startsWith(\"image/\")) {\r\n\r\n                    const reader  = new FileReader();\r\n                    reader.onload = () => {\r\n\r\n                        preview.src = reader.result;\r\n                        preview.removeAttribute(\"hidden\");\r\n                        this.shadowRoot.querySelector(\".reuploadBtn\")?.removeAttribute(\"hidden\");\r\n                    \r\n                    };\r\n                    reader.readAsDataURL(file);\r\n                \r\n                }\r\n            \r\n            } else {\r\n\r\n                filePrompt.textContent = this.prompt_;\r\n                preview?.setAttribute(\"hidden\", \"\");\r\n                preview.src = \"\";\r\n            \r\n            }\r\n        \r\n        });\r\n\r\n        // Drag-and-drop support\r\n        dropArea?.addEventListener(\"dragover\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.add(\"dragover\");\r\n        \r\n        });\r\n\r\n        dropArea?.addEventListener(\"dragleave\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.remove(\"dragover\");\r\n        \r\n        });\r\n\r\n        dropArea?.addEventListener(\"drop\", (e) => {\r\n\r\n            e.preventDefault();\r\n            dropArea.classList.remove(\"dragover\");\r\n            const droppedFiles = e.dataTransfer.files;\r\n            if (droppedFiles.length > 0) {\r\n\r\n                fileInput.files = droppedFiles;\r\n                fileInput.dispatchEvent(new Event(\"change\"));\r\n            \r\n            }\r\n        \r\n        });\r\n    \r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/file.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/icon.js":
/*!********************************************!*\
  !*** ./app/static/jay-comps/comps/icon.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Icon extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.path_ = \"\";\r\n        \r\n        this.name_ = \"Icon\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n        \r\n        this.render();\r\n    \r\n    }\r\n\r\n    set path(newPath) {\r\n\r\n        this.path_ = newPath;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    get path() {\r\n\r\n        return this.path_;\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <img class=\"icon\" src=\"/static/icons/${this.path_}\">\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const icon = this.design.create({\r\n            class: \"icon\",\r\n            display: \"flex\",\r\n            border: \"borderDefault\",\r\n            borderRadius: 8,\r\n            width: \"auto\",\r\n            padding: 5,\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const iconHover = this.design.create({\r\n            class: \"icon\",\r\n            pseudoClass: \"hover\",\r\n            background: \"black10\",\r\n            border: \"border\"\r\n        });\r\n\r\n        const iconActive = this.design.create({\r\n            class: \"icon\",\r\n            pseudoClass: \"active\",\r\n            background: \"black20\"\r\n        });\r\n        \r\n        return /* css */ `\r\n        :host {\r\n            width: auto\r\n        }\r\n        ${icon}\r\n        ${iconHover}\r\n        ${iconActive}\r\n        `;\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-icon\", Icon);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/icon.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/input.js":
/*!*********************************************!*\
  !*** ./app/static/jay-comps/comps/input.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputComp: () => (/* binding */ InputComp)\n/* harmony export */ });\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass InputComp extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        \r\n        this.label_    = \"Label\";\r\n        this.type_     = \"text\";\r\n        this.prompt_   = \"Enter text\";\r\n        this.required_ = false;\r\n\r\n        this.name_ = \"Input\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n\r\n        this.render();\r\n    \r\n    }\r\n\r\n    set label(newLabel) {\r\n\r\n        this.label_ = newLabel;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    set type(newType) {\r\n\r\n        this.type_ = newType;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    set prompt(newPrompt) {\r\n\r\n        this.prompt_ = newPrompt;\r\n        this.update(this.createHTML(), this.css_);\r\n    \r\n    }\r\n\r\n    set required (flag){\r\n\r\n        this.required_ = flag;\r\n        this.update(this.createHTML(), this.css_);\r\n\r\n    }\r\n\r\n    get label() {\r\n\r\n        return this.label_;\r\n    \r\n    }\r\n\r\n    get type() {\r\n\r\n        return this.type_;\r\n    \r\n    }\r\n\r\n    get prompt() {\r\n\r\n        return this.prompt_;\r\n    \r\n    }\r\n\r\n    get value() {\r\n\r\n        return this.shadowRoot.querySelector(\"input\").value;\r\n\r\n    }\r\n\r\n    get required(){\r\n\r\n        return this.required_;\r\n    \r\n    }\r\n\r\n    isEmpty(){\r\n\r\n        return !this.value.trim();\r\n    \r\n    }\r\n\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"inputContainer\">\r\n            <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n            <input class=\"inputValue\" type=\"${this.type_}\" placeholder=\"${this.prompt_}\">\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const inputContainer = this.design.create({\r\n            class: \"inputContainer\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            maxWidth: \"none\",\r\n            padding: 0,\r\n            alignItems: \"start\",\r\n            gap: 10,\r\n            background: \"--white\"\r\n        });\r\n\r\n        const input = this.design.create({\r\n            class: \"inputValue\",\r\n            display: \"block\",\r\n            fontSize: 16,\r\n            width: \"100%\",\r\n            padding: \"8px 12px\",\r\n            border: \"border\",\r\n            borderRadius: 8,\r\n            boxSizing: \"border-box\"\r\n        });\r\n\r\n        const inputHover = this.design.create({\r\n            class: \"inputValue\",\r\n            pseudoClass: \"hover\",\r\n            outline: \"solid 2px var(--black60)\"\r\n        });\r\n\r\n        const inputActive = this.design.create({\r\n            class: \"inputValue\",\r\n            pseudoClass: \"focus\",\r\n            outline: \"solid 2px var(--black100)\"\r\n        });\r\n\r\n        const statusRed = this.design.create({\r\n            class: \"strength-red\",\r\n            borderBottom: \"2px solid red\"\r\n        });\r\n\r\n        const statusYellow = this.design.create({\r\n            class: \"strength-yellow\",\r\n            borderBottom: \"2px solid orange\",\r\n        });\r\n\r\n        const statusGreen = this.design.create({\r\n            class: \"strength-green\",\r\n            borderBottom: \"2px solid green\",\r\n        });\r\n\r\n        const hint = this.design.create({\r\n            class: \"hint\",\r\n            fontSize: \"0.75rem\",\r\n            colour: \"black\",\r\n            paddingTop: 4\r\n        });\r\n\r\n\r\n        return /* css */ `\r\n        \r\n        ${inputContainer}\r\n        ${input}\r\n        ${inputHover}\r\n        ${inputActive}\r\n        ${statusRed}\r\n        ${statusYellow}\r\n        ${statusGreen}\r\n        ${hint}\r\n        `;\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-input\", InputComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/input.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/navbar.js":
/*!**********************************************!*\
  !*** ./app/static/jay-comps/comps/navbar.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n\r\n\r\nclass Navbar extends jay_comp__WEBPACK_IMPORTED_MODULE_0__.Comp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.lastScrollY = window.scrollY;\r\n\r\n        this.name_ = \"Navbar\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n        \r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div id=\"navbar\" class=\"container\">\r\n            <a><h3 class=\"logo\">Whondo</h3></a>\r\n            <ul class=\"links\">\r\n                <li class=\"link\">About</li>\r\n                <li class=\"link\">Landlord Portal</li>\r\n                <li class=\"link\">GitHub</li>\r\n            </ul>\r\n            <comp-icon class=\"menu\" id=\"menu\"></comp-icon>\r\n            <div class=\"buttons\">\r\n                <comp-button id=\"register\"></comp-button>\r\n                <comp-button id=\"login\"></comp-button>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"tray\" class=\"tray\">\r\n            <div class=\"header\">\r\n                <a><h3 class=\"logo\">Whondo</h3></a>\r\n                <comp-icon class=\"close\" id=\"close\"></comp-icon>\r\n            </div>\r\n\r\n            <ul class=\"linksTray\">\r\n                <li class=\"link\">About</li>\r\n                <li class=\"link\">Landlord Portal</li>\r\n                <li class=\"link\">GitHub</li>\r\n            </ul>\r\n\r\n            <div class=\"trayButtons\">\r\n                <comp-button id=\"registerMob\"></comp-button>\r\n                <comp-button id=\"loginMob\"></comp-button>\r\n            </div>\r\n        </div>\r\n        \r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS() {\r\n\r\n        const container = this.design.create({\r\n            class: \"container\",\r\n            top: \"0\",\r\n            zIndex: \"1000\",\r\n            position: \"fixed\",\r\n            display: \"flex\",\r\n            alignItems: \"centre\",\r\n            width: \"100%\",\r\n            background: \"white\",\r\n            boxSizing: \"border-box\",\r\n            padding: \"10px 20px\",\r\n            justifyContent: \"space-between\",\r\n            transition: \"top 0.4s\"\r\n        });\r\n\r\n        const logo = this.design.create({\r\n            class: \"logo\",\r\n            fontWeight: \"bold\"\r\n        });\r\n\r\n        const links = this.design.create({\r\n            class: \"links\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"centre\",\r\n            gap: 20\r\n        });\r\n\r\n        // Navbar links\r\n        const link = this.design.create({\r\n            class: \"link\",\r\n            colour: \"black80\",\r\n            fontSize: 16,\r\n            padding: 10,\r\n            border: \"borderDefault\",\r\n            borderRadius: 8,\r\n            listStyleType: \"None\",\r\n            cursor: \"pointer\",\r\n            transition: \"background 0.1s ease-in-out\"\r\n        });\r\n\r\n        const linkHover = this.design.create({\r\n            class: \"link\",\r\n            colour: \"black100\",\r\n            pseudoClass: \"hover\",\r\n            border: \"border\",\r\n            background: \"black10\"\r\n        });\r\n\r\n        const linkActive = this.design.create({\r\n            class: \"link\",\r\n            pseudoClass: \"active\",\r\n            background: \"black20\"\r\n        });\r\n\r\n        const menu = this.design.create({\r\n            class: \"menu\",\r\n            display: \"None\",\r\n        });\r\n\r\n        const close = this.design.create({\r\n            class: \"close\",\r\n            display: \"None\",\r\n        });\r\n\r\n        const buttons = this.design.create({\r\n            class: \"buttons\",\r\n            display: \"flex\",\r\n            width: \"auto\",\r\n            gap: 20\r\n        });\r\n\r\n        const hideTray = this.design.create({\r\n            class: \"tray\",\r\n            display: \"None\"\r\n        });\r\n\r\n        // Media quuery adjustments\r\n        const header = this.design.create({\r\n            class: \"header\",\r\n            display: \"flex\",\r\n            alignItems: \"centre\",\r\n            justifyContent: \"space-between\"\r\n        });\r\n\r\n        const logoMob = this.design.create({\r\n            class: \"logo\",\r\n            fontSize: 28\r\n        });\r\n\r\n        const linksMob = this.design.create({\r\n            class: \"links\",\r\n            display: \"None\"\r\n        });\r\n\r\n        const buttonsMob = this.design.create({\r\n            class: \"buttons\",\r\n            display: \"None\"\r\n        });\r\n\r\n        const menuMob = this.design.create({\r\n            class: \"menu\",\r\n            display: \"block\",\r\n        });\r\n\r\n        const closeMob = this.design.create({\r\n            class: \"close\",\r\n            display: \"block\",\r\n        });\r\n\r\n        const tray = this.design.create({\r\n            class: \"tray\",\r\n            display: \"flex\",\r\n            bottom: \"-500px\",\r\n            position: \"fixed\",\r\n            zIndex: \"1000\",\r\n            boxSizing: \"border-box\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n            background: \"white\",\r\n            padding: 20,\r\n            borderRadius: 14,\r\n            transition: \"bottom 0.6s\"\r\n        });\r\n\r\n        const trayButtons = this.design.create({\r\n            class: \"trayButtons\",\r\n            display: \"flex\",\r\n            gap: 10,\r\n            paddingTop: 40\r\n        });\r\n\r\n        return /* css */`\r\n        ${container}\r\n\r\n        ${logo}\r\n\r\n        ${links}\r\n        ${link}\r\n\r\n        /* Hide Icons */\r\n        ${menu}\r\n        ${close}\r\n\r\n        ${linkHover}\r\n        ${linkActive}\r\n\r\n        ${menu}\r\n        ${buttons}\r\n        ${hideTray}\r\n\r\n        @media (max-width: 600px) {\r\n            ${header}\r\n            ${logoMob}\r\n            ${linksMob}\r\n            ${buttonsMob}\r\n            ${menuMob}\r\n            ${closeMob}\r\n            ${tray}\r\n            ${trayButtons}\r\n        }\r\n        `;\r\n    \r\n    }\r\n\r\n    /**\r\n     * @brief Function hides/shows the navbar on scroll.\r\n     * \r\n     * The function takes the current Y position of the navbar and checks if the current pixel difference is greater than 20px.\r\n     * If so then the top is increased to hide the element then the last Y position is updated to reflect the change.\r\n     */\r\n    navbarScroll() {\r\n\r\n        const navbar     = this.shadowRoot.getElementById(\"navbar\");\r\n        const currentPos = window.scrollY;\r\n        \r\n        if (currentPos > this.lastScrollY && currentPos > 20) navbar.style.top = \"-80px\";\r\n        else navbar.style.top = \"0\";\r\n        \r\n        this.lastScrollY = currentPos;\r\n    \r\n    }\r\n\r\n    openMenu(offset) {\r\n\r\n        const tray        = this.shadowRoot.getElementById(\"tray\");\r\n        tray.style.bottom = offset;\r\n    \r\n    }\r\n\r\n    hook() {\r\n        \r\n        const register    = this.shadowRoot.getElementById(\"register\");\r\n        const login       = this.shadowRoot.getElementById(\"login\");\r\n        const menu        = this.shadowRoot.getElementById(\"menu\");\r\n        const close       = this.shadowRoot.getElementById(\"close\");\r\n        const loginMob    = this.shadowRoot.getElementById(\"loginMob\");\r\n        const registerMob = this.shadowRoot.getElementById(\"registerMob\");\r\n        \r\n        register.text       = \"Register\";\r\n        register.variant    = 2;\r\n        login.text          = \"login\";\r\n        menu.path           = \"menu.svg\";\r\n        close.path          = \"close.svg\";\r\n        loginMob.text       = \"Login\";\r\n        registerMob.text    = \"Register\";\r\n        registerMob.variant = 2;\r\n\r\n        window.addEventListener(\"scroll\", this.navbarScroll.bind(this));\r\n\r\n        menu.addEventListener(\"click\", () => {\r\n\r\n            this.openMenu(\"0\");\r\n        \r\n        });\r\n\r\n        close.addEventListener(\"click\", () => {\r\n\r\n            this.openMenu(\"-500px\");\r\n        \r\n        });\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-navbar\", Navbar);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/navbar.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/password.js":
/*!************************************************!*\
  !*** ./app/static/jay-comps/comps/password.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/input.js\");\n\r\n/** @extends {InputComp} */\r\nclass PasswordComp extends _input_js__WEBPACK_IMPORTED_MODULE_0__.InputComp {\r\n\r\n    constructor(){\r\n\r\n        super();\r\n\r\n        this.type_          = \"password\";\r\n        this.enableEntropy_ = false; \r\n\r\n        this.name_ = \"Password Comp\",\r\n        this.html_ = this.createHTML();\r\n        this.css_ = this.createCSS(); \r\n\r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML(){\r\n\r\n        return /* html */`\r\n            <div class=\"inputContainer\">\r\n\r\n                <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n                <input class=\"inputValue\" type=\"${this.type_}\" placeholder=\"${this.prompt_}\">\r\n\r\n                <div class=\"hint\" style=\"display: none\">\r\n                    Hint: Use a mix of letters, numbers, and symbols\r\n                </div>\r\n            </div>\r\n        \r\n        `;\r\n        \r\n    }\r\n\r\n    calculateEntropy(password){\r\n\r\n        let poolSize = 0;\r\n        if(/[a-z]/.test(password)) poolSize += 26;\r\n        if(/[A-Z]/.test(password)) poolSize += 26;\r\n        if(/[0-9]/.test(password)) poolSize += 10;\r\n        if(/[^A-Za-z0-9]/.test(password)) poolSize += 32;\r\n\r\n        return password.length * Math.log2(poolSize || 1);\r\n    \r\n    }\r\n\r\n    hook(){\r\n\r\n        const input = this.shadowRoot.querySelector(\".inputValue\");\r\n        const hint  = this.shadowRoot.querySelector(\".hint\");\r\n\r\n        if (this.type_ === \"password\" && this.enableEntropy_){\r\n\r\n            input.addEventListener(\"input\", () => {\r\n\r\n                const entropy = this.calculateEntropy(input.value);\r\n                if(entropy < 20) {\r\n\r\n                    input.classList.add(\"strength-red\");\r\n                    hint.style.display = \"block\";\r\n                    hint.textContent   = \"Too weak. Add more variety.\";\r\n            \r\n                } else if ( entropy < 60) {\r\n\r\n                    input.classList.add(\"strength-red\");\r\n                    hint.style.display = \"block\";\r\n                    hint.textContent   = \"Weak: Try adding symbols, numbers or uppercase letters.\";\r\n            \r\n                } else if (entropy < 78) {\r\n\r\n                    input.classList.add(\"strength-yellow\");\r\n                    hint.style.display = \"block\";\r\n                    hint.textContent   = \"Almost strong: Consider mixing symbols and length.\";\r\n            \r\n                } else {\r\n\r\n                    input.classList.add(\"strength-green\");\r\n                    hint.style.display = \"none\";\r\n            \r\n                }\r\n        \r\n            });\r\n\r\n        }\r\n    \r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"comp-password\", PasswordComp);\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/password.js?");

/***/ }),

/***/ "./app/static/jay-comps/comps/textarea.js":
/*!************************************************!*\
  !*** ./app/static/jay-comps/comps/textarea.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.js */ \"./app/static/jay-comps/comps/input.js\");\n\r\n\r\n/** @extends {InputComp} */\r\nclass TextareaComp extends _input_js__WEBPACK_IMPORTED_MODULE_0__.InputComp {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.type_ = \"textarea\";\r\n\r\n        this.name_ = \"Textarea Input\";\r\n        this.html_ = this.createHTML();\r\n        this.css_  = this.createCSS();\r\n        \r\n        this.render();\r\n    \r\n    }\r\n\r\n    createHTML() {\r\n\r\n        return /* html */ `\r\n        <div class=\"inputContainer\">\r\n            <label style=\"color: var(--black80); font-size: 14px\">${this.label_}</label>\r\n            <textarea class=\"inputValue areaInput\" placeholder=\"${this.prompt_}\" rows=\"6\"></textarea>\r\n        </div>\r\n        `;\r\n    \r\n    }\r\n\r\n    createCSS(){\r\n\r\n        const areaInput = this.design.create({\r\n            class: \"areaInput\",\r\n            resize: \"none\",\r\n            height: \"80px\",\r\n            width: \"100%\",\r\n        });\r\n\r\n        return /* css */`\r\n            ${areaInput}\r\n        `;\r\n    \r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\ncustomElements.define(\"comp-textarea\", TextareaComp);\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/comps/textarea.js?");

/***/ }),

/***/ "./app/static/jay-comps/imports.js":
/*!*****************************************!*\
  !*** ./app/static/jay-comps/imports.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jay_comp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jay-comp */ \"./node_modules/jay-comp/dist/comp.js\");\n/* harmony import */ var _comps_button_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comps/button.js */ \"./app/static/jay-comps/comps/button.js\");\n/* harmony import */ var _comps_card_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./comps/card.js */ \"./app/static/jay-comps/comps/card.js\");\n/* harmony import */ var _comps_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comps/input.js */ \"./app/static/jay-comps/comps/input.js\");\n/* harmony import */ var _comps_dialog_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comps/dialog.js */ \"./app/static/jay-comps/comps/dialog.js\");\n/* harmony import */ var _comps_icon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comps/icon.js */ \"./app/static/jay-comps/comps/icon.js\");\n/* harmony import */ var _comps_navbar_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./comps/navbar.js */ \"./app/static/jay-comps/comps/navbar.js\");\n/* harmony import */ var _comps_password_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./comps/password.js */ \"./app/static/jay-comps/comps/password.js\");\n/* harmony import */ var _comps_file_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./comps/file.js */ \"./app/static/jay-comps/comps/file.js\");\n/* harmony import */ var _comps_textarea_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./comps/textarea.js */ \"./app/static/jay-comps/comps/textarea.js\");\n/* harmony import */ var _comp_pages_login_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./comp-pages/login.js */ \"./app/static/jay-comps/comp-pages/login.js\");\n/* harmony import */ var _comp_pages_register_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./comp-pages/register.js */ \"./app/static/jay-comps/comp-pages/register.js\");\n/* harmony import */ var _comp_pages_create_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./comp-pages/create.js */ \"./app/static/jay-comps/comp-pages/create.js\");\n\r\n// Comp src file\r\n\r\n\r\n// Comps\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Pages\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./app/static/jay-comps/imports.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/api.js":
/*!*******************************************!*\
  !*** ./node_modules/jay-comp/dist/api.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API: () => (/* binding */ API)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    api.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.0\n *\n * Licence:     Apache 2.0\n */\n/**\n * # API\n *\n * Class for HTTP requests.\n *\n * ### Overview:\n * Provides a method `request` to abstract from JavaScript's `fetch` API.\n *\n * ### Methods:\n * - **request()**: Makes a GET or POST HTTP request.\n */\nclass API {\n    /**\n     * ## Request\n     *\n     * Performs a GET or POST HTTP request.\n     *\n     * ### Behaviour:\n     * Method performs an HTTP request, validates the input, handles any errors, and returns\n     * a valid JSON response.\n     *\n     * To use this method, you need to contain it within an `async` function in order to read\n     * the Promise that is returned.\n     *\n     * ### Parameters:\n     * - **url** (`string`): The URL of the REST API endpoint.\n     * - **method** (`string`): The request method, `POST` or `GET`.\n     * - **data** (`Object`): The JSON data as a JavaScript object.\n     *\n     * ### Returns:\n     * `Promise` - The request data.\n     *\n     * ### Example:\n     * ```js\n     * async post(result, json) {\n     *     let data = await this.api.request(\"/login\", \"POST\", json);\n     *     (data.status) ? result.innerHTML = data.message : result.innerHTML = data.error;\n     * }\n     * ```\n     * ```js\n     * async get() {\n     *     const data = await this.api.request(\"/fact\", \"GET\");\n     *     console.log(data.fact);\n     * }\n     * ```\n     */\n    async request(url, method, data) {\n        if (method !== \"POST\" && method !== \"GET\") {\n            throw new Error(\"Unsupported or invalid method type\");\n        }\n        const options = {\n            method: method,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        if (method === \"POST\")\n            options.body = JSON.stringify(data);\n        try {\n            const response = await fetch(url, options);\n            if (!response.ok)\n                throw new Error(`HTTP ERROR: Status: ${response.status}`);\n            return await response.json();\n        }\n        catch (error) {\n            throw new Error(error.message);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/api.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/comp.js":
/*!********************************************!*\
  !*** ./node_modules/jay-comp/dist/comp.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Comp: () => (/* binding */ Comp)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"./node_modules/jay-comp/dist/api.js\");\n/* harmony import */ var _design_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./design.js */ \"./node_modules/jay-comp/dist/design.js\");\n/* harmony import */ var _effects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./effects.js */ \"./node_modules/jay-comp/dist/effects.js\");\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    comp.ts\n * Author:      Josh Bassett\n * Date:        08/06/2025\n * Version:     1.2\n *\n * Licence:     Apache 2.0\n */\n\n\n\n/**\n * # Comp\n *\n * Abstract base class for Comps that handles core logic.\n *\n * ### Overview:\n * This class serves as the foundation for every component (Comp). Derived classes must override:\n * - **createHTML()**: Provides the component's HTML structure.\n * - **createCSS()**: Defines the component-specific styles.\n * - **hook()**: Implements JavaScript logic within the component.\n *\n * ### Properties:\n * - **name** (`string`): The name of the component.\n * - **html** (`string`): The HTML structure of the component.\n * - **css** (`string`): The CSS rules applied to the component.\n * - **design** (`Design`): A reference to the Design class for styling.\n * - **api** (`API`): A reference to the API handler for data management.\n * - **effect** (`Effects`): A reference to the Effects class for animations.\n *\n * ### Methods:\n * - **render()**: Updates the component's Shadow DOM.\n * - **update(newHTML, newCSS)**: Updates the component’s content and re-renders.\n * - **debug()**: Logs the component's data for debugging purposes.\n *\n * ### Example:\n * ```js\n *\n * class MyComp extends Comp {\n *\n *     constructor() {\n *\n *         super();\n *\n *         this.hello_ = \"Hello World!\";\n *\n *         this.name_ = \"Comp\";\n *         this.html_ = createHTML();\n *         this.css_  = createCSS();\n *\n *         this.render();\n *\n *     }\n *\n *     createHTML() {\n *\n *         return `<button class=\"hello\">${this.hello_}</button>`;\n *\n *     }\n *\n *     createCSS() {\n *\n *         const style = this.design.create({\n *             class: \"hello\",\n *             background: \"black100\",\n *             colour: \"white\",\n *             padding: 10,\n *             borderRadius: 8\n *         });\n *\n *         return `${style}`;\n *     }\n *\n *     hook() {\n *\n *         this.shadowRoot\n *             .querySelector('button')\n *             .addEventListener(\"click\", () => {\n *                 console.log(this.hello_);\n *         });\n *\n *     }\n *\n * }\n * ```\n */\nclass Comp extends HTMLElement {\n    constructor() {\n        super();\n        this.name_ = \"Component Name\";\n        this.html_ = \"\";\n        this.css_ = \"\";\n        this.design = new _design_js__WEBPACK_IMPORTED_MODULE_1__.Design();\n        this.api = new _api_js__WEBPACK_IMPORTED_MODULE_0__.API();\n        this.effect = new _effects_js__WEBPACK_IMPORTED_MODULE_2__.Effects();\n        this.attachShadow({ mode: \"open\" });\n    }\n    // Getter and setter for Comp name\n    set name(newCompName) {\n        this.name_ = newCompName;\n    }\n    get name() {\n        return this.name_;\n    }\n    // Getter and setter for Comp HTML\n    set html(newCompHTML) {\n        this.html_ = newCompHTML;\n    }\n    get html() {\n        return this.html_;\n    }\n    // Getter and setter for Comp CSS\n    set css(newCompCSS) {\n        this.css_ = newCompCSS;\n    }\n    get css() {\n        return this.css_;\n    }\n    /**\n     * ## Create Template\n     *\n     * Builds an HTML Element template string.\n     *\n     * ### Behaviour:\n     * The method takes two string arguments with the HTML and CSS data that is\n     * injected into a template string.\n     *\n     * ### Parameters:\n     * - **html** (`string`): The HTML to be rendered.\n     * - **css** (`string`): The CSS to be rendered.\n     *\n     * ### Returns:\n     * `string` - Template string to be injected.\n     */\n    createTemplate(html, css) {\n        return /* html */ `\n      ${html}\n      <style>\n        ${this.design.defaultComp()}\n        ${css}\n      </style>\n    `;\n    }\n    /**\n     * ## Debug\n     *\n     * Prints debug information to the console.\n     *\n     * ### Behaviour:\n     * The method prints out the Comp `name`, `html_` and `css_` attributes to the console for\n     * debugging.\n     *\n     * ### Example:\n     * ```js\n     *\n     * this.debug()\n     * ```\n     */\n    debug() {\n        console.log(\"DEBUG COMP: \" + this.name);\n        console.log(this.name);\n        console.log(this.html);\n        console.log(this.css);\n    }\n    /**\n     * ## Render\n     *\n     * Renders the Comp to the screen.\n     *\n     * ### Behaviour:\n     * Method renders the Comp by setting the Shadow DOM's innerHTML to the generated template.\n     *\n     * If a hook (an internal build method) is defined, it will be invoked afterwards.\n     *\n     * ### Example:\n     * ```js\n     *\n     * constructor() {\n     *\n     *     this.name_ = \"Comp\";\n     *     this.html_ = this.createHTML();\n     *     this.css_  = this.createCSS();\n     *\n     *     this.render();\n     * }\n     * ```\n     */\n    render() {\n        if (!this.shadowRoot) {\n            throw new Error(\"Shadow root is not available.\");\n        }\n        this.shadowRoot.innerHTML = this.createTemplate(this.html_, this.css_);\n        if (typeof this.hook === \"function\") {\n            this.hook();\n        }\n    }\n    /**\n     * # Update\n     *\n     * Updates the Comp with new HTML/CSS.\n     *\n     * ### Behaviour:\n     * Method updates the Comp's internal HTML/CSS with new values.\n     *\n     * Then renders the Comp with the new template.\n     *\n     * ### Parameters:\n     * - **newHTML** (`string`): The new HTML to be injected.\n     * - **newCSS** (`string`): The new CSS to be injected.\n     *\n     * ### Example:\n     * ```js\n     *\n     * set buttonText(newButtonText) {\n     *\n     *     this.buttonText_ = newButtonText;\n     *     this.update(this.createHTML(), this.css_);\n     * }\n     * ```\n     */\n    update(newHTML, newCSS) {\n        this.html_ = newHTML;\n        this.css_ = newCSS;\n        this.render();\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/comp.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/design.js":
/*!**********************************************!*\
  !*** ./node_modules/jay-comp/dist/design.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Design: () => (/* binding */ Design)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett\n *\n * Filename:    design.ts\n * Author:      Josh Bassett\n * Date:        09/06/2025\n * Version:     1.3\n *\n * Licence:     Apache 2.0\n */\n/**\n * # Design\n *\n * Class that compiles JavaScript → CSS.\n *\n * ### Overview:\n * This class serves as the compiler for converting JavaScript into valid CSS.\n *\n * This is achieved through the `compileCSS()` method and the `create()` API for the\n * developer to write their CSS, but with the luxury of JavaScript Record notation.\n *\n * ### Methods:\n * - **create()**: Public API for the developer to write CSS.\n * - **compileCSS()**: Compiler for CSS.\n * - **parseVariables()**: Converts camel case variables to kebab case.\n * - **check()**: Returns px value.\n * - **americanise()**: Converts British to American property names.\n *\n * ### Example:\n * ```js\n * const instance = new [ClassName]();\n * instance.[methodName]([argument]);\n * ```\n */\nclass Design {\n    /**\n     * ## Default Comp\n     *\n     * Injects basic Comp CSS.\n     *\n     * ### Behaviour:\n     * Method injects values:\n     * - `root` values to ensure shadow DOM elements inherit correctly.\n     * - Typography styles modelled on Material Design for accessibility.\n     *\n     * ### Returns:\n     * `string` - Default CSS to be injected.\n     */\n    defaultComp() {\n        return /* css */ `\n        * {\n            margin: 0;\n            padding: 0;\n        }\n        :host {\n            display: block;\n            width: 100%;\n            box-sizing: border-box;\n        }\n        h1 {\n            font-size: 57px;\n            font-weight: 500;\n            line-height: 64pt;\n        }\n        h2 {\n            font-size: 45px;\n            font-weight: 500;\n            line-height: 52pt;\n        }\n        h3 {\n            font-size: 36px;\n            font-weight: 500;\n            line-height: 44pt;\n        }\n        h4 {\n            font-size: 32px;\n            font-weight: 400;\n            line-height: 40pt;\n        }\n        h5 {\n            font-size: 28px;\n            font-weight: 400;\n            line-height: 36pt;\n        }\n        h6 {\n            font-size: 24px;\n            font-weight: 400;\n            line-height: 32pt;\n        }\n        p {\n            font-size: 16px;\n            font-weight: 400;\n            line-height: 24pt;\n        }\n        label {\n            font-size: 12px;\n            font-weight: 500;\n            line-height: 16pt;\n        }\n        `;\n    }\n    /**\n     * ## Create\n     *\n     * Generates a CSS string from a configuration object.\n     *\n     * ### Behaviour:\n     * This method transforms a JavaScript object (with keys in camelCase)\n     * into a CSS string, converting keys to kebab-case and ensuring the proper\n     * conversion of British to American English for property names. Global CSS\n     * variables may be referenced as <code>var(--example)</code>, and all colour\n     * properties must be defined as CSS variables.\n     *\n     * ### Parameters:\n     * - **css** (`CSSConfig`): A configuration object representing CSS properties and values.\n     *\n     * ### Returns:\n     * `string` - The compiled CSS code.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const cssConfig = this.create({\n     *   class: \"container\",\n     *   pseudoClass: \"hover\",\n     *   display: \"flex\",\n     *   flexDirection: \"column\",\n     *   boxSizing: \"border-box\",\n     *   width: \"100%\",\n     *   maxWidth: 500,\n     *   padding: 20,\n     *   alignItems: \"center\",\n     *   border: true,\n     *   borderRadius: 10,\n     *   background: \"white\",\n     *   colour: \"black100\",\n     *   fontSize: 16,\n     *   fontWeight: 400,\n     *   opacity: 1\n     * });\n     * ```\n     */\n    create(css) {\n        let cssSelector = (css.pseudoClass) ? `${css.class}:${css.pseudoClass}` : css.class;\n        return /* css */ `\n        .${cssSelector} {\n            ${this.compileCSS(css)}\n        }\n        `;\n    }\n    /**\n     * ## Compile CSS\n     *\n     * Compiles a CSS configuration object into a valid CSS string.\n     *\n     * ### Behaviour:\n     * This method iterates over a CSS configuration object, performing necessary\n     * transformations such as:\n     *\n     * - Converting camelCase keys to kebab-case.\n     * - Converting British English property names to American English.\n     * - Appending appropriate units (e.g. px, pt) to numerical values.\n     *\n     * ### Parameters:\n     * - **css** (`CSSConfig`): A configuration object representing CSS properties and values.\n     *\n     * ### Returns:\n     * `string` - The compiled CSS code.\n     */\n    compileCSS(css) {\n        let cssString = \"\";\n        for (let key in css) {\n            let cssValue = css[key];\n            if (key === \"class\" || key == \"psuedoClass\")\n                continue;\n            cssValue = this.check(key, cssValue);\n            key = this.parseVariables(key);\n            cssString += `${this.americanise(key)}: ${this.americanise(cssValue)};\\n`;\n        }\n        return cssString;\n    }\n    /**\n     * ## parseVariables\n     *\n     * Converts a camel case variable to kebab case.\n     *\n     * ### Behaviour:\n     * Method uses a regex to split the variable up at capital letters and add a hyphen.\n     *\n     * ### Parameters:\n     * - **variable** (`string`): Camel case variable.\n     *\n     * ### Returns:\n     * `string` - Kebab case variable.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const c = \"fontSize\";\n     * const k = parseVariables(c);\n     * console.log(c + \" -> \" + k);\n     * ```\n     * ```plaintext\n     *\n     * fontSize -> font-size\n     * ```\n     */\n    parseVariables(variable) {\n        return variable.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n    /**\n     * ## americanise\n     *\n     * Converts British → American CSS property names.\n     *\n     * ### Behaviour:\n     * Method matches CSS property names that are spelt using British English and converts them to American English.\n     *\n     * This allows for CSS to be written in British English.\n     *\n     * ### Parameters:\n     * - **variable** (`string`): Variable to be converted.\n     *\n     * ### Returns:\n     * `string` - Valid CSS property name.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const brit = \"colour\";\n     * const amer = americanise(brit);\n     * console.log(brit + \" -> \" + amer);\n     * ```\n     * ```plaintext\n     *\n     * colour -> color\n     * ```\n     */\n    americanise(variable) {\n        const convert = {\n            \"colour\": \"color\",\n            \"centre\": \"center\",\n            \"grey\": \"gray\",\n            \"behaviour\": \"behavior\"\n        };\n        const textValue = String(variable);\n        return convert[textValue] || textValue;\n    }\n    /**\n     * ## check\n     *\n     * Runs checks to compile variable types.\n     *\n     * ### Behaviour:\n     * Method takes the key and value of the CSSConfig and checks for conditions to compile\n     * the correct variable types.\n     *\n     * ### Parameters:\n     * - **key** (`string`): The key, e.g. (class, fontSize, background).\n     * - **value** (`CSSValue`): The value, e.g. (\"classname\", 100, var(--black100)).\n     *\n     * ### Returns:\n     * `string` | `CSSValue` - Valid CSS value.\n     *\n     * ### Example:\n     * ```js\n     *\n     * const key = \"fontSize\";\n     * const val = 200;\n     * const css = check(key, val);\n     * console.log(css);\n     * ```\n     * ```plaintext\n     *\n     * 200px\n     * ```\n     */\n    check(key, value) {\n        if (key === \"fontSize\" && typeof value === 'number')\n            return `${value}px`;\n        else if ((key === \"opacity\" || key === \"fontWeight\") && typeof value === 'number')\n            return value;\n        else if (typeof value === 'number')\n            return `${value}px`;\n        else if (key === \"background\" || key === \"colour\" || key === \"border\")\n            return `var(--${value})`;\n        else\n            return value;\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/design.js?");

/***/ }),

/***/ "./node_modules/jay-comp/dist/effects.js":
/*!***********************************************!*\
  !*** ./node_modules/jay-comp/dist/effects.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Effects: () => (/* binding */ Effects)\n/* harmony export */ });\n/**\n * Copyright (c) 2025 Josh Bassett, whondo.com\n *\n * Filename:    effect.ts\n * Authors:     Sarit Samkumpim, Josh Bassett\n * Date:        11/06/2025\n * Version:     1.1\n *\n * Licence:     Apache 2.0\n */\n/**\n * # Effects\n *\n * Class provides a CSS animation library.\n *\n * ### Overview:\n * The class provides a set of common reusable effects to help you build interactive\n * Comps quickly.\n *\n * The `prop()` API is used to define an animation property, then add the effect name\n * as the argument to access it within the CSS.\n *\n * ### Methods:\n * - **prop()**: API for defining a property.\n * - **fadeIn()**: Fade in effect.\n * - **fadeOut()**: Fade out effect.\n * - **fadeLeft()**: Fade left effect.\n * - **fadeRight()**: Fade right effect.\n * - **slideUp()**: Slide up from the bottom effect.\n * - **slideDown()**: Slide down from the top effect.\n * - **scale()**: Scale effect.\n * - **pulse()**: Pulse effect.\n * - **fadeOutLeft()**: Fade out left effect.\n * - **fadeOutRight()**: Fade out right effect.\n *\n * ### Example:\n * ```js\n * createCSS() {\n *     const effect = this.effect.slideUp(25); // Translates Y 25px\n *     const prop   = this.effect.prop(\"slideUp\", .5); // Runs for half a second\n *     const css = this.design.create({\n *         // css omitted\n *         animation: prop\n *     });\n *     return `\n *     ${effect}\n *     `;\n * }\n * ```\n */\nclass Effects {\n    /**\n     * ## Prop\n     *\n     * Creates a CSS animation property.\n     *\n     * ### Behaviour:\n     * Method creates a CSS animation property from the input. Note: the name of the effect needs\n     * to be present to target the correct animation.\n     *\n     * ### Parameters:\n     * - **name** (`string`): Name of effect.\n     * - **duration** (`string`): Duration of effect.\n     * - **timing** (`string`): Timing of effect.\n     * - **delay** (`string`): Delay of effect.\n     * - **iterate** (`string`): Repetitions of effect.\n     * - **direction** (`string`): Direction of effect.\n     * - **fillMode** (`string`): Style for effect when it's not playing.\n     *\n     * ### Returns:\n     * `string` - Valid CSS animation property.\n     *\n     * ### Example:\n     * ```js\n     * effects.prop(\"slideUp\", .5, \"ease-in-out\", .2);\n     * effects.prop(\"scale\", 1);\n     * effects.prop(\"fadeIn\", .5);\n     * ```\n     */\n    prop(name, duration, timing = \"ease\", delay = \"0\", iterate = \"1\", direction = \"normal\", fillMode = \"none\") {\n        return `${name} ${duration}s ${timing} ${delay}s ${iterate} ${direction} ${fillMode};`;\n    }\n    /**\n     * ## Fade In\n     *\n     * Provides an effect for fading in an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that gradually increase the opacity from 0 to 1.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-in effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeInCSS = effects.fadeIn();\n     * ```\n     */\n    fadeIn() {\n        return /* css */ `\n      @keyframes fadeIn {\n        0% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out\n     *\n     * Provides an effect for fading out an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's opacity from 1 to 0.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal containing the keyframes for a fade-out effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutCSS = effects.fadeOut();\n     * ```\n     */\n    fadeOut() {\n        return /* css */ `\n      @keyframes fadeOut {\n        0% {\n          opacity: 1;\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Left\n     *\n     * Provides an effect for fading in an element from the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels to translate the element from the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeLeftCSS = effects.fadeLeft(20);\n     * ```\n     */\n    fadeLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeLeft {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Right\n     *\n     * Provides an effect for fading in an element from the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that start with the element translated on the X-axis by a given value\n     * and with opacity 0, then transitions to full opacity and no translation.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The number of pixels by which the element is translated to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-in from right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeRightCSS = effects.fadeRight(20);\n     * ```\n     */\n    fadeRight(translateX) {\n        return /* css */ `\n      @keyframes fadeRight {\n        0% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Up\n     *\n     * Provides an effect for sliding an element up into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated downward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset downward.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-up effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideUpCSS = effects.slideUp(20);\n     * ```\n     */\n    slideUp(translateY) {\n        return /* css */ `\n      @keyframes slideUp {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Slide Down\n     *\n     * Provides an effect for sliding an element down into view.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element translated upward along the Y-axis by a given number of pixels and invisible,\n     * and then transitions to no translation and full opacity.\n     *\n     * ### Parameters:\n     * - **translateY** (`number`): The vertical distance (in pixels) the element is offset.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a slide-down effect.\n     *\n     * ### Example:\n     * ```js\n     * const slideDownCSS = effects.slideDown(20);\n     * ```\n     */\n    slideDown(translateY) {\n        return /* css */ `\n      @keyframes slideDown {\n        0% {\n          opacity: 0;\n          transform: translateY(${translateY}px);\n        }\n        100% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Scale\n     *\n     * Provides an effect for scaling an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that transition the element's scale from an initial value to a target value,\n     * while also transitioning from transparent to fully opaque.\n     *\n     * ### Parameters:\n     * - **scaleFrom** (`number`): The initial scale factor.\n     * - **scaleTo** (`number`): The target scale factor.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a scaling effect.\n     *\n     * ### Example:\n     * ```js\n     * const scaleCSS = effects.scale(0.8, 1);\n     * ```\n     */\n    scale(scaleFrom, scaleTo) {\n        return /* css */ `\n      @keyframes scaleIn {\n        0% {\n          opacity: 0;\n          transform: scale(${scaleFrom});\n        }\n        100% {\n          opacity: 1;\n          transform: scale(${scaleTo});\n        }\n      }\n    `;\n    }\n    /**\n     * ## Pulse\n     *\n     * Provides a pulsing effect for an element.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that scale an element up slightly and then return it to its original size,\n     * creating a subtle pulsating appearance.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a pulsing effect.\n     *\n     * ### Example:\n     * ```js\n     * const pulseCSS = effects.pulse();\n     * ```\n     */\n    pulse() {\n        return /* css */ `\n      @keyframes pulsing {\n        0% {\n          transform: scale(1);\n        }\n        50% {\n          transform: scale(1.05);\n        }\n        100% {\n          transform: scale(1);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Right\n     *\n     * Provides an effect for fading out an element to the right.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the right.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the right.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to right effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutRightCSS = effects.fadeOutRight(20);\n     * ```\n     */\n    fadeOutRight(translateX) {\n        return /* css */ `\n      @keyframes fadeOutRight {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n    /**\n     * ## Fade Out Left\n     *\n     * Provides an effect for fading out an element to the left.\n     *\n     * ### Behaviour:\n     * Generates CSS keyframes that begin with the element fully opaque and untransformed,\n     * then transition to full transparency while translating the element to the left.\n     *\n     * ### Parameters:\n     * - **translateX** (`number`): The horizontal distance (in pixels) the element is moved to the left.\n     *\n     * ### Returns:\n     * `string` - A CSS string literal with the keyframes for a fade-out to left effect.\n     *\n     * ### Example:\n     * ```js\n     * const fadeOutLeftCSS = effects.fadeOutLeft(20);\n     * ```\n     */\n    fadeOutLeft(translateX) {\n        return /* css */ `\n      @keyframes fadeOutLeft {\n        0% {\n          opacity: 1;\n          transform: translateX(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateX(${translateX}px);\n        }\n      }\n    `;\n    }\n}\n\n\n//# sourceURL=webpack:///./node_modules/jay-comp/dist/effects.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/static/jay-comps/imports.js");
/******/ 	
/******/ })()
;